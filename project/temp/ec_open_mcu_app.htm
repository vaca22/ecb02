<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\temp\ec_open_mcu_app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\temp\ec_open_mcu_app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Jul 02 23:12:03 2022
<BR><P>
<H3>Maximum Stack Usage =        852 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
gattClientProcessMsgCB &rArr; gattProcessMultiReqs &rArr; gattProcessWriteLong &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">ATT_BuildErrorRsp</a> from att_util.o(i.ATT_BuildErrorRsp) referenced from att_server.o(i.ATT_ErrorRsp)
 <LI><a href="#[42]">ATT_BuildExchangeMTUReq</a> from att_util.o(i.ATT_BuildExchangeMTUReq) referenced from att_client.o(i.ATT_ExchangeMTUReq)
 <LI><a href="#[43]">ATT_BuildExchangeMTURsp</a> from att_util.o(i.ATT_BuildExchangeMTURsp) referenced from att_server.o(i.ATT_ExchangeMTURsp)
 <LI><a href="#[44]">ATT_BuildExecuteWriteReq</a> from att_util.o(i.ATT_BuildExecuteWriteReq) referenced from att_client.o(i.ATT_ExecuteWriteReq)
 <LI><a href="#[45]">ATT_BuildFindByTypeValueReq</a> from att_util.o(i.ATT_BuildFindByTypeValueReq) referenced from att_client.o(i.ATT_FindByTypeValueReq)
 <LI><a href="#[46]">ATT_BuildFindByTypeValueRsp</a> from att_util.o(i.ATT_BuildFindByTypeValueRsp) referenced from att_server.o(i.ATT_FindByTypeValueRsp)
 <LI><a href="#[47]">ATT_BuildFindInfoReq</a> from att_util.o(i.ATT_BuildFindInfoReq) referenced from att_client.o(i.ATT_FindInfoReq)
 <LI><a href="#[48]">ATT_BuildFindInfoRsp</a> from att_util.o(i.ATT_BuildFindInfoRsp) referenced from att_server.o(i.ATT_FindInfoRsp)
 <LI><a href="#[49]">ATT_BuildHandleValueInd</a> from att_util.o(i.ATT_BuildHandleValueInd) referenced from att_server.o(i.ATT_HandleValueInd)
 <LI><a href="#[49]">ATT_BuildHandleValueInd</a> from att_util.o(i.ATT_BuildHandleValueInd) referenced from att_server.o(i.ATT_HandleValueNoti)
 <LI><a href="#[4a]">ATT_BuildPrepareWriteReq</a> from att_util.o(i.ATT_BuildPrepareWriteReq) referenced from att_client.o(i.ATT_PrepareWriteReq)
 <LI><a href="#[4b]">ATT_BuildPrepareWriteRsp</a> from att_util.o(i.ATT_BuildPrepareWriteRsp) referenced from att_server.o(i.ATT_PrepareWriteRsp)
 <LI><a href="#[4c]">ATT_BuildReadBlobReq</a> from att_util.o(i.ATT_BuildReadBlobReq) referenced from att_client.o(i.ATT_ReadBlobReq)
 <LI><a href="#[4d]">ATT_BuildReadBlobRsp</a> from att_util.o(i.ATT_BuildReadBlobRsp) referenced from att_server.o(i.ATT_ReadBlobRsp)
 <LI><a href="#[4f]">ATT_BuildReadByGrpTypeRsp</a> from att_util.o(i.ATT_BuildReadByGrpTypeRsp) referenced from att_server.o(i.ATT_ReadByGrpTypeRsp)
 <LI><a href="#[4e]">ATT_BuildReadByTypeReq</a> from att_util.o(i.ATT_BuildReadByTypeReq) referenced from att_client.o(i.ATT_ReadByGrpTypeReq)
 <LI><a href="#[4e]">ATT_BuildReadByTypeReq</a> from att_util.o(i.ATT_BuildReadByTypeReq) referenced from att_client.o(i.ATT_ReadByTypeReq)
 <LI><a href="#[50]">ATT_BuildReadByTypeRsp</a> from att_util.o(i.ATT_BuildReadByTypeRsp) referenced from att_server.o(i.ATT_ReadByTypeRsp)
 <LI><a href="#[51]">ATT_BuildReadMultiRsp</a> from att_util.o(i.ATT_BuildReadMultiRsp) referenced from att_server.o(i.ATT_ReadMultiRsp)
 <LI><a href="#[52]">ATT_BuildReadRsp</a> from att_util.o(i.ATT_BuildReadRsp) referenced from att_server.o(i.ATT_ReadRsp)
 <LI><a href="#[53]">ATT_BuildWriteReq</a> from att_util.o(i.ATT_BuildWriteReq) referenced from att_client.o(i.ATT_WriteReq)
 <LI><a href="#[a5]">ATT_ParseExchangeMTUReq</a> from att_util.o(i.ATT_ParseExchangeMTUReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[58]">ATT_ParseExchangeMTURsp</a> from att_util.o(i.ATT_ParseExchangeMTURsp) referenced from gatt_client.o(i.GATT_ExchangeMTU)
 <LI><a href="#[b6]">ATT_ParseExecuteWriteReq</a> from att_util.o(i.ATT_ParseExecuteWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[72]">ATT_ParseExecuteWriteRsp</a> from att_util.o(i.ATT_ParseExecuteWriteRsp) referenced from gatt_client.o(i.gattProcessReliableWrites)
 <LI><a href="#[72]">ATT_ParseExecuteWriteRsp</a> from att_util.o(i.ATT_ParseExecuteWriteRsp) referenced from gatt_client.o(i.gattProcessWriteLong)
 <LI><a href="#[a9]">ATT_ParseFindByTypeValueReq</a> from att_util.o(i.ATT_ParseFindByTypeValueReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[a7]">ATT_ParseFindInfoReq</a> from att_util.o(i.ATT_ParseFindInfoReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[b5]">ATT_ParsePrepareWriteReq</a> from att_util.o(i.ATT_ParsePrepareWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[af]">ATT_ParseReadBlobReq</a> from att_util.o(i.ATT_ParseReadBlobReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[57]">ATT_ParseReadByGrpTypeRsp</a> from att_util.o(i.ATT_ParseReadByGrpTypeRsp) referenced from gatt_client.o(i.GATT_DiscAllPrimaryServices)
 <LI><a href="#[ab]">ATT_ParseReadByTypeReq</a> from att_util.o(i.ATT_ParseReadByTypeReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[73]">ATT_ParseReadByTypeRsp</a> from att_util.o(i.ATT_ParseReadByTypeRsp) referenced from gatt_client.o(i.gattReadByType)
 <LI><a href="#[b0]">ATT_ParseReadMultiReq</a> from att_util.o(i.ATT_ParseReadMultiReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[ad]">ATT_ParseReadReq</a> from att_util.o(i.ATT_ParseReadReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[b3]">ATT_ParseWriteReq</a> from att_util.o(i.ATT_ParseWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[75]">ATT_ParseWriteRsp</a> from att_util.o(i.ATT_ParseWriteRsp) referenced from gatt_client.o(i.gattWrite)
 <LI><a href="#[2f]">A_task</a> from main.o(i.A_task) referenced from main.o(i.main)
 <LI><a href="#[9b]">EC_APP_Task_ProcessEvent</a> from ec_app_task.o(i.EC_APP_Task_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[97]">GAPBondMgr_ProcessEvent</a> from gapbondmgr.o(i.GAPBondMgr_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[96]">GAPCentralRole_ProcessEvent</a> from central.o(i.GAPCentralRole_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[95]">GAPRole_ProcessEvent</a> from peripheral.o(i.GAPRole_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[93]">GAP_ProcessEvent</a> from gap_task.o(i.GAP_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[98]">GATTServApp_ProcessEvent</a> from gattservapp.o(i.GATTServApp_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[94]">GATT_ProcessEvent</a> from gatt_task.o(i.GATT_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[8f]">HCI_ProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[5e]">L2CAP_BuildCmdReject</a> from l2cap_util.o(i.L2CAP_BuildCmdReject) referenced from l2cap_if.o(i.L2CAP_CmdReject)
 <LI><a href="#[60]">L2CAP_BuildParamUpdateRsp</a> from l2cap_util.o(i.L2CAP_BuildParamUpdateRsp) referenced from l2cap_if.o(i.L2CAP_ConnParamUpdateRsp)
 <LI><a href="#[91]">L2CAP_ProcessEvent</a> from l2cap_task.o(i.L2CAP_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[22]">LL_CreateConn1</a> from patch.o(i.LL_CreateConn1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[3a]">LL_ENC_AES128_Encrypt1</a> from patch.o(i.LL_ENC_AES128_Encrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[24]">LL_ENC_Decrypt1</a> from patch.o(i.LL_ENC_Decrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[24]">LL_ENC_Decrypt1</a> from patch.o(i.LL_ENC_Decrypt1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[3b]">LL_ENC_Encrypt1</a> from patch.o(i.LL_ENC_Encrypt1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[37]">LL_IRQHandler1</a> from patch.o(i.LL_IRQHandler1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[8e]">LL_ProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[2b]">LL_SetAdvControl1</a> from patch.o(i.LL_SetAdvControl1) referenced from patch.o(i.ll_patch_slave)
 <LI><a href="#[28]">LL_SetAdvParam1</a> from patch.o(i.LL_SetAdvParam1) referenced from patch.o(i.ll_patch_slave)
 <LI><a href="#[3e]">LL_SetDataLengh1</a> from patch.o(i.LL_SetDataLengh1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[21]">LL_SetScanControl1</a> from patch.o(i.LL_SetScanControl1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[20]">LL_SetScanParam1</a> from patch.o(i.LL_SetScanParam1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[23]">LL_StartEncrypt1</a> from patch.o(i.LL_StartEncrypt1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[10]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[92]">SM_ProcessEvent</a> from sm_task.o(i.SM_ProcessEvent) referenced 2 times from osal_simpleble.o(.constdata)
 <LI><a href="#[c]">SM_StartEncryption</a> from sm_intpairing.o(i.SM_StartEncryption) referenced 2 times from sm_intpairing.o(.data)
 <LI><a href="#[9a]">SimpleBLECentral_ProcessEvent</a> from simpleblecentral.o(i.SimpleBLECentral_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[99]">SimpleBLEPeripheral_ProcessEvent</a> from simplebleperipheral.o(i.SimpleBLEPeripheral_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[13]">SystemInit</a> from system_armcm0.o(i.SystemInit) referenced from startup_armcm0.o(.text)
 <LI><a href="#[9c]">Watchdog_ProcessEvent</a> from watchdog.o(i.Watchdog_ProcessEvent) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[14]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[12]">_hard_fault</a> from jump_table.o(i._hard_fault) referenced from jump_table.o(.emb_text)
 <LI><a href="#[15]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[70]">_uart0_putc</a> from my_printf.o(i._uart0_putc) referenced from my_printf.o(i.ec_core_uart0_printf)
 <LI><a href="#[1d]">adc_wakeup_hdl</a> from adc.o(i.adc_wakeup_hdl) referenced from adc.o(i.hal_adc_init)
 <LI><a href="#[16]">ec_app_ble_peripheral_connect_event</a> from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_connect_event) referenced from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
 <LI><a href="#[17]">ec_app_ble_peripheral_disconnect_event</a> from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_disconnect_event) referenced from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
 <LI><a href="#[19]">ec_app_ble_peripheral_notify_disable_event</a> from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_notify_disable_event) referenced from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
 <LI><a href="#[18]">ec_app_ble_peripheral_notify_enable_event</a> from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_notify_enable_event) referenced from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
 <LI><a href="#[1a]">ec_app_ble_peripheral_receive_event</a> from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_receive_event) referenced from ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
 <LI><a href="#[65]">ec_core_gpio_p0_int</a> from ec_core_gpio.o(i.ec_core_gpio_p0_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[6f]">ec_core_gpio_p10_int</a> from ec_core_gpio.o(i.ec_core_gpio_p10_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[66]">ec_core_gpio_p1_int</a> from ec_core_gpio.o(i.ec_core_gpio_p1_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[67]">ec_core_gpio_p2_int</a> from ec_core_gpio.o(i.ec_core_gpio_p2_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[68]">ec_core_gpio_p3_int</a> from ec_core_gpio.o(i.ec_core_gpio_p3_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[69]">ec_core_gpio_p4_int</a> from ec_core_gpio.o(i.ec_core_gpio_p4_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[6a]">ec_core_gpio_p5_int</a> from ec_core_gpio.o(i.ec_core_gpio_p5_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[6b]">ec_core_gpio_p6_int</a> from ec_core_gpio.o(i.ec_core_gpio_p6_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[6c]">ec_core_gpio_p7_int</a> from ec_core_gpio.o(i.ec_core_gpio_p7_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[6d]">ec_core_gpio_p8_int</a> from ec_core_gpio.o(i.ec_core_gpio_p8_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[6e]">ec_core_gpio_p9_int</a> from ec_core_gpio.o(i.ec_core_gpio_p9_int) referenced from ec_core_gpio.o(i.ec_core_gpio_int_register)
 <LI><a href="#[1b]">ec_core_hw_timer_int_process</a> from ec_core_timer.o(i.ec_core_hw_timer_int_process) referenced from ec_core_timer.o(i.ec_core_hw_timer_init)
 <LI><a href="#[1c]">ec_core_sw_watchdog_10s_task</a> from ec_core_wdg.o(i.ec_core_sw_watchdog_10s_task) referenced from ec_core_wdg.o(i.ec_core_sw_watchdog_init)
 <LI><a href="#[2d]">failling</a> from main.o(i.failling) referenced from main.o(i.main)
 <LI><a href="#[54]">gapBondMgrSendServiceChange</a> from gapbondmgr.o(i.gapBondMgrSendServiceChange) referenced from gapbondmgr.o(i.GAPBondMgr_ServiceChangeInd)
 <LI><a href="#[5]">gapCancelLinkReq</a> from gap_centlinkmgr.o(i.gapCancelLinkReq) referenced 2 times from gap_centdevmgr.o(.data)
 <LI><a href="#[3]">gapCentProcessHCICmdEvt</a> from gap_centdevmgr.o(i.gapCentProcessHCICmdEvt) referenced 2 times from gap_centdevmgr.o(.data)
 <LI><a href="#[71]">gapCentralRole_timerCB</a> from central.o(i.gapCentralRole_timerCB) referenced from central.o(i.gapCentralRole_ProcessOSALMsg)
 <LI><a href="#[7]">gapPeriProcessHCICmdCompleteEvt</a> from gap_peridevmgr.o(i.gapPeriProcessHCICmdCompleteEvt) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[8]">gapProcessAdvertisingEvt</a> from gap_peridevmgr.o(i.gapProcessAdvertisingEvt) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[6]">gapProcessConnEvt</a> from gap_centdevmgr.o(i.gapProcessConnEvt) referenced 2 times from gap_centdevmgr.o(.data)
 <LI><a href="#[4]">gapProcessScanningEvt</a> from gap_centdevmgr.o(i.gapProcessScanningEvt) referenced 2 times from gap_centdevmgr.o(.data)
 <LI><a href="#[9]">gapSetAdvParams</a> from gap_peridevmgr.o(i.gapSetAdvParams) referenced 2 times from gap_peridevmgr.o(.data)
 <LI><a href="#[5b]">gattClientHandleConnStatusCB</a> from gatt_client.o(i.gattClientHandleConnStatusCB) referenced from gatt_client.o(i.GATT_InitClient)
 <LI><a href="#[74]">gattClientHandleTimerCB</a> from gatt_client.o(i.gattClientHandleTimerCB) referenced from gatt_client.o(i.gattStoreClientInfo)
 <LI><a href="#[5a]">gattClientProcessMsgCB</a> from gatt_client.o(i.gattClientProcessMsgCB) referenced from gatt_client.o(i.GATT_InitClient)
 <LI><a href="#[a6]">gattProcessExchangeMTUReq</a> from gatt_server.o(i.gattProcessExchangeMTUReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[b7]">gattProcessExecuteWriteReq</a> from gatt_server.o(i.gattProcessExecuteWriteReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[aa]">gattProcessFindByTypeValueReq</a> from gatt_server.o(i.gattProcessFindByTypeValueReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[a8]">gattProcessFindInfoReq</a> from gatt_server.o(i.gattProcessFindInfoReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[b2]">gattProcessReadByGrpTypeReq</a> from gatt_server.o(i.gattProcessReadByGrpTypeReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[ac]">gattProcessReadByTypeReq</a> from gatt_server.o(i.gattProcessReadByTypeReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[b1]">gattProcessReadMultiReq</a> from gatt_server.o(i.gattProcessReadMultiReq) referenced from gatt_server.o(.constdata)
 <LI><a href="#[ae]">gattProcessReadReq</a> from gatt_server.o(i.gattProcessReadReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[b4]">gattProcessWriteReq</a> from gatt_server.o(i.gattProcessWriteReq) referenced 2 times from gatt_server.o(.constdata)
 <LI><a href="#[56]">gattServApp_HandleConnStatusCB</a> from gattservapp.o(i.gattServApp_HandleConnStatusCB) referenced from gattservapp.o(i.GATTServApp_Init)
 <LI><a href="#[8d]">gattServApp_WriteAttrCB</a> from gattservapp.o(i.gattServApp_WriteAttrCB) referenced from gattservapp.o(.constdata)
 <LI><a href="#[5d]">gattServerHandleConnStatusCB</a> from gatt_server.o(i.gattServerHandleConnStatusCB) referenced from gatt_server.o(i.GATT_InitServer)
 <LI><a href="#[59]">gattServerHandleTimerCB</a> from gatt_server.o(i.gattServerHandleTimerCB) referenced from gatt_server.o(i.GATT_Indication)
 <LI><a href="#[5c]">gattServerProcessMsgCB</a> from gatt_server.o(i.gattServerProcessMsgCB) referenced from gatt_server.o(i.GATT_InitServer)
 <LI><a href="#[8b]">ggs_ReadAttrCB</a> from gapgattserver.o(i.ggs_ReadAttrCB) referenced from gapgattserver.o(.constdata)
 <LI><a href="#[8c]">ggs_WriteAttrCB</a> from gapgattserver.o(i.ggs_WriteAttrCB) referenced from gapgattserver.o(.constdata)
 <LI><a href="#[78]">hal_GPIO_IRQHandler</a> from gpio.o(i.hal_GPIO_IRQHandler) referenced from gpio.o(i.hal_gpioin_register)
 <LI><a href="#[7b]">hal_TIMER5_IRQHandler</a> from timer.o(i.hal_TIMER5_IRQHandler) referenced from timer.o(i.hal_timer_set)
 <LI><a href="#[7c]">hal_TIMER6_IRQHandler</a> from timer.o(i.hal_TIMER6_IRQHandler) referenced from timer.o(i.hal_timer_set)
 <LI><a href="#[35]">hal_UART0_IRQHandler</a> from uart.o(_section_sram_code_) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[77]">hal_gpio_sleep_handler</a> from gpio.o(i.hal_gpio_sleep_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[76]">hal_gpio_wakeup_handler</a> from gpio.o(i.hal_gpio_wakeup_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[31]">hal_pwrmgr_sleep_process</a> from pwrmgr.o(i.hal_pwrmgr_sleep_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[32]">hal_pwrmgr_wakeup_process</a> from pwrmgr.o(i.hal_pwrmgr_wakeup_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[7a]">hal_timer_sleep_handler</a> from timer.o(i.hal_timer_sleep_handler) referenced from timer.o(i.hal_timer_init)
 <LI><a href="#[79]">hal_timer_wakeup_handler</a> from timer.o(i.hal_timer_wakeup_handler) referenced from timer.o(i.hal_timer_init)
 <LI><a href="#[64]">hal_watchdog_sleep_handler</a> from watchdog.o(i.hal_watchdog_sleep_handler) referenced from watchdog.o(i.Watchdog_Init)
 <LI><a href="#[64]">hal_watchdog_sleep_handler</a> from watchdog.o(i.hal_watchdog_sleep_handler) referenced from watchdog.o(i.lxl_Watchdog_Init_func)
 <LI><a href="#[63]">hal_watchdog_wakeup_handler</a> from watchdog.o(i.hal_watchdog_wakeup_handler) referenced from watchdog.o(i.Watchdog_Init)
 <LI><a href="#[63]">hal_watchdog_wakeup_handler</a> from watchdog.o(i.hal_watchdog_wakeup_handler) referenced from watchdog.o(i.lxl_Watchdog_Init_func)
 <LI><a href="#[7e]">handleConnStatusCB</a> from ota_app_service.o(i.handleConnStatusCB) referenced from ota_app_service.o(i.ota_app_AddService)
 <LI><a href="#[34]">hard_fault</a> from jump_table.o(.emb_text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[1e]">hw_spif_cache_config</a> from flash.o(i.hw_spif_cache_config) referenced from flash.o(i.hal_spif_cache_init)
 <LI><a href="#[5f]">l2capBuildParamUpdateReq</a> from l2cap_util.o(i.l2capBuildParamUpdateReq) referenced from l2cap_if.o(i.L2CAP_ConnParamUpdateReq)
 <LI><a href="#[7d]">l2capHandleTimerCB</a> from l2cap_util.o(i.l2capHandleTimerCB) referenced from l2cap_util.o(i.l2capSendReq)
 <LI><a href="#[3d]">l2capPocessFragmentTxData</a> from l2cap_util.o(_section_sram_code_) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[29]">llCalcMaxScanTime1</a> from patch.o(i.llCalcMaxScanTime1) referenced from patch.o(i.ll_patch_slave)
 <LI><a href="#[1f]">llMasterEvt_TaskEndOk1</a> from patch.o(i.llMasterEvt_TaskEndOk1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[25]">llProcessMasterControlProcedures1</a> from patch.o(i.llProcessMasterControlProcedures1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[26]">llProcessSlaveControlProcedures1</a> from patch.o(i.llProcessSlaveControlProcedures1) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[3f]">llProcessTxData1</a> from patch.o(i.llProcessTxData1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[2a]">llSecAdvAllow1</a> from patch.o(i.llSecAdvAllow1) referenced from patch.o(i.ll_patch_slave)
 <LI><a href="#[2c]">llSetupSecAdvEvt1</a> from patch.o(i.llSetupSecAdvEvt1) referenced from patch.o(i.ll_patch_slave)
 <LI><a href="#[40]">ll_generateTxBuffer1</a> from patch.o(i.ll_generateTxBuffer1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[36]">ll_hw_go1</a> from patch.o(i.ll_hw_go1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[27]">ll_processBasicIRQ_SRX0</a> from patch.o(i.ll_processBasicIRQ_SRX0) referenced from patch.o(i.ll_patch_master)
 <LI><a href="#[11]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[30]">osalInitTasks</a> from osal_simpleble.o(i.osalInitTasks) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[90]">osal_CbTimerProcessEvent</a> from bb_rom_sym_m0.txt(ABSOLUTE) referenced from osal_simpleble.o(.constdata)
 <LI><a href="#[9d]">ota_ReadAttrCB</a> from ota_app_service.o(i.ota_ReadAttrCB) referenced from ota_app_service.o(.constdata)
 <LI><a href="#[9e]">ota_WriteAttrCB</a> from ota_app_service.o(i.ota_WriteAttrCB) referenced from ota_app_service.o(.constdata)
 <LI><a href="#[1]">peripheralStateNotificationCB</a> from simplebleperipheral.o(i.peripheralStateNotificationCB) referenced 2 times from simplebleperipheral.o(.data)
 <LI><a href="#[2]">peripheralStateReadRssiCB</a> from simplebleperipheral.o(i.peripheralStateReadRssiCB) referenced 2 times from simplebleperipheral.o(.data)
 <LI><a href="#[38]">rf_calibrate1</a> from rf_phy_driver.o(i.rf_calibrate1) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[39]">rf_phy_change_cfg0</a> from rf_phy_driver.o(i.rf_phy_change_cfg0) referenced from patch.o(_section_xip_code_)
 <LI><a href="#[33]">rf_phy_ini</a> from rf_phy_driver.o(i.rf_phy_ini) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2e]">rising</a> from main.o(i.rising) referenced from main.o(i.main)
 <LI><a href="#[a2]">simpleBLECentralEventCB</a> from simpleblecentral.o(i.simpleBLECentralEventCB) referenced from simpleblecentral.o(.constdata)
 <LI><a href="#[a4]">simpleBLECentralPairStateCB</a> from simpleblecentral.o(i.simpleBLECentralPairStateCB) referenced from simpleblecentral.o(.constdata)
 <LI><a href="#[a3]">simpleBLECentralPasscodeCB</a> from simpleblecentral.o(i.simpleBLECentralPasscodeCB) referenced from simpleblecentral.o(.constdata)
 <LI><a href="#[a1]">simpleBLECentralRssiCB</a> from simpleblecentral.o(i.simpleBLECentralRssiCB) referenced from simpleblecentral.o(.constdata)
 <LI><a href="#[0]">simpleProfileChangeCB</a> from simplebleperipheral.o(i.simpleProfileChangeCB) referenced 2 times from simplebleperipheral.o(.data)
 <LI><a href="#[62]">simpleProfile_HandleConnStatusCB</a> from sbpprofile_ota.o(i.simpleProfile_HandleConnStatusCB) referenced from sbpprofile_ota.o(i.SimpleProfile_AddService)
 <LI><a href="#[9f]">simpleProfile_ReadAttrCB</a> from sbpprofile_ota.o(i.simpleProfile_ReadAttrCB) referenced from sbpprofile_ota.o(.constdata)
 <LI><a href="#[a0]">simpleProfile_WriteAttrCB</a> from sbpprofile_ota.o(i.simpleProfile_WriteAttrCB) referenced from sbpprofile_ota.o(.constdata)
 <LI><a href="#[b]">smInitiatorSendNextKeyInfo</a> from sm_intpairing.o(i.smInitiatorSendNextKeyInfo) referenced 2 times from sm_intpairing.o(.data)
 <LI><a href="#[61]">smLinkCheck</a> from sm_pairing.o(i.smLinkCheck) referenced from sm_task.o(i.SM_Init)
 <LI><a href="#[f]">smResponderProcessLTKReq</a> from sm_rsppairing.o(i.smResponderProcessLTKReq) referenced 2 times from sm_rsppairing.o(.data)
 <LI><a href="#[e]">smResponderSendNextKeyInfo</a> from sm_rsppairing.o(i.smResponderSendNextKeyInfo) referenced 2 times from sm_rsppairing.o(.data)
 <LI><a href="#[83]">smState_timerCB</a> from sm_task.o(i.smState_timerCB) referenced from sm_intpairing.o(i.smInitiatorSendNextKeyInfo)
 <LI><a href="#[83]">smState_timerCB</a> from sm_task.o(i.smState_timerCB) referenced from sm_rsppairing.o(i.smResponderSendNextKeyInfo)
 <LI><a href="#[8a]">smTo_timerCB</a> from sm_task.o(i.smTo_timerCB) referenced from sm_mgr.o(i.smStartRspTimer)
 <LI><a href="#[84]">smpBuildEncInfo</a> from smp.o(i.smpBuildEncInfo) referenced from sm_pairing.o(i.smPairingSendEncInfo)
 <LI><a href="#[85]">smpBuildIdentityAddrInfo</a> from smp.o(i.smpBuildIdentityAddrInfo) referenced from sm_pairing.o(i.smPairingSendIdentityAddrInfo)
 <LI><a href="#[86]">smpBuildIdentityInfo</a> from smp.o(i.smpBuildIdentityInfo) referenced from sm_pairing.o(i.smPairingSendIdentityInfo)
 <LI><a href="#[87]">smpBuildMasterID</a> from smp.o(i.smpBuildMasterID) referenced from sm_pairing.o(i.smPairingSendMasterID)
 <LI><a href="#[7f]">smpBuildPairingConfirm</a> from smp.o(i.smpBuildPairingConfirm) referenced from sm_pairing.o(i.smGenerateConfirm)
 <LI><a href="#[89]">smpBuildPairingFailed</a> from smp.o(i.smpBuildPairingFailed) referenced from sm_pairing.o(i.smSendFailAndEnd)
 <LI><a href="#[82]">smpBuildPairingRandom</a> from smp.o(i.smpBuildPairingRandom) referenced from sm_pairing.o(i.smGenerateRandMsg)
 <LI><a href="#[80]">smpBuildPairingReq</a> from smp.o(i.smpBuildPairingReq) referenced from sm_pairing.o(i.smGeneratePairingReqRsp)
 <LI><a href="#[81]">smpBuildPairingRsp</a> from smp.o(i.smpBuildPairingRsp) referenced from sm_pairing.o(i.smGeneratePairingReqRsp)
 <LI><a href="#[55]">smpBuildSecurityReq</a> from smp.o(i.smpBuildSecurityReq) referenced from gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest)
 <LI><a href="#[88]">smpBuildSigningInfo</a> from smp.o(i.smpBuildSigningInfo) referenced from sm_pairing.o(i.smPairingSendSingingInfo)
 <LI><a href="#[a]">smpInitiatorProcessIncoming</a> from sm_intpairing.o(i.smpInitiatorProcessIncoming) referenced 2 times from sm_intpairing.o(.data)
 <LI><a href="#[d]">smpResponderProcessIncoming</a> from sm_rsppairing.o(i.smpResponderProcessIncoming) referenced 2 times from sm_rsppairing.o(.data)
 <LI><a href="#[3c]">wakeup_init1</a> from patch.o(i.wakeup_init1) referenced from patch.o(_section_xip_code_)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[de]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond (via Veneer)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByTypeRsp (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByGrpTypeRsp (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate1 (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
</UL>

<P><STRONG><a name="[2f8]"></a>__aeabi_idivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_free_size (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init (via Veneer)
</UL>

<P><STRONG><a name="[294]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
</UL>

<P><STRONG><a name="[2f4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart1_rx_parse (via Veneer)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart0_rx_parse (via Veneer)
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_adcc_cfg (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init (via Veneer)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_bytes_old (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_default_name (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init (via Veneer)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spis_int_handle (via Veneer)
</UL>

<P><STRONG><a name="[142]"></a>strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_set_suuid (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_set_ruuid (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_send (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failling (via Veneer)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_receive_data (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_default_name (via Veneer)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_str_to_num (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd (via Veneer)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_scan_cb (via Veneer)
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[da]"></a>HCI_CommandCompleteEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqReplyCmd (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqNegReplyCmd (via Veneer)
</UL>

<P><STRONG><a name="[d7]"></a>HCI_CommandStatusEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnUpdateCmd (via Veneer)
</UL>

<P><STRONG><a name="[25b]"></a>HCI_DisconnectCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq (via Veneer)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext (via Veneer)
</UL>

<P><STRONG><a name="[246]"></a>HCI_GAPTaskRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init (via Veneer)
</UL>

<P><STRONG><a name="[29d]"></a>HCI_HostNumCompletedPktCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts (via Veneer)
</UL>

<P><STRONG><a name="[383]"></a>HCI_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[29f]"></a>HCI_L2CAPTaskRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init (via Veneer)
</UL>

<P><STRONG><a name="[301]"></a>HCI_LE_AddWhiteListCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList (via Veneer)
</UL>

<P><STRONG><a name="[300]"></a>HCI_LE_ClearWhiteListCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList (via Veneer)
</UL>

<P><STRONG><a name="[302]"></a>HCI_LE_CreateConnCancelCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCancelLinkReq (via Veneer)
</UL>

<P><STRONG><a name="[242]"></a>HCI_LE_CreateConnCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq (via Veneer)
</UL>

<P><STRONG><a name="[3b9]"></a>HCI_LE_RandCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
</UL>

<P><STRONG><a name="[327]"></a>HCI_LE_ReadBufSizeCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus (via Veneer)
</UL>

<P><STRONG><a name="[394]"></a>HCI_LE_ReadRemoteUsedFeaturesCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB (via Veneer)
</UL>

<P><STRONG><a name="[2c9]"></a>HCI_LE_ReadResolvingListSizeCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[25c]"></a>HCI_LE_SetAdvDataCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
</UL>

<P><STRONG><a name="[23f]"></a>HCI_LE_SetAdvEnableCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus (via Veneer)
</UL>

<P><STRONG><a name="[32f]"></a>HCI_LE_SetAdvParamCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams (via Veneer)
</UL>

<P><STRONG><a name="[322]"></a>HCI_LE_SetRandomAddressCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr (via Veneer)
</UL>

<P><STRONG><a name="[32c]"></a>HCI_LE_SetScanEnableCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable (via Veneer)
</UL>

<P><STRONG><a name="[238]"></a>HCI_LE_SetScanParamCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest (via Veneer)
</UL>

<P><STRONG><a name="[25d]"></a>HCI_LE_SetScanRspDataCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
</UL>

<P><STRONG><a name="[2b8]"></a>HCI_LE_StartEncyptCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption (via Veneer)
</UL>

<P><STRONG><a name="[38a]"></a>HCI_PPLUS_ConnEventDoneNoticeCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralStateNotificationCB (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB (via Veneer)
</UL>

<P><STRONG><a name="[8f]"></a>HCI_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[24a]"></a>HCI_ReadBDADDRCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit (via Veneer)
</UL>

<P><STRONG><a name="[395]"></a>HCI_ReadRemoteVersionInfoCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB (via Veneer)
</UL>

<P><STRONG><a name="[221]"></a>HCI_ReadRssiCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[2b2]"></a>HCI_SMPTaskRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init (via Veneer)
</UL>

<P><STRONG><a name="[d2]"></a>HCI_SendDataPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt (via Veneer)
</UL>

<P><STRONG><a name="[321]"></a>HCI_ValidConnTimeParams</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt (via Veneer)
</UL>

<P><STRONG><a name="[2a9]"></a>HCI_bm_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc (via Veneer)
</UL>

<P><STRONG><a name="[1a1]"></a>LL_AdvReportCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[dd]"></a>LL_ConnActive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkReply (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkNegReply (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate1 (via Veneer)
</UL>

<P><STRONG><a name="[e0]"></a>LL_CreateConn0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CreateConn1 (via Veneer)
</UL>

<P><STRONG><a name="[388]"></a>LL_Disconnect</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_disconnect_link (via Veneer)
</UL>

<P><STRONG><a name="[183]"></a>LL_ENC_AES128_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
</UL>

<P><STRONG><a name="[e1]"></a>LL_ENC_AES128_Encrypt0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[18c]"></a>LL_ENC_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncRsp (via Veneer)
</UL>

<P><STRONG><a name="[105]"></a>LL_ENC_GenDeviceIV</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[104]"></a>LL_ENC_GenDeviceSKD</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>LL_ENC_GenerateNonce</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[106]"></a>LL_ENC_GenerateTrueRandNum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[e2]"></a>LL_ENC_LoadKey</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt1 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt1 (via Veneer)
</UL>

<P><STRONG><a name="[16c]"></a>LL_EncChangeCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[16d]"></a>LL_EncKeyRefreshCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[182]"></a>LL_EncLtkReqCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[39c]"></a>LL_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt (via Veneer)
</UL>

<P><STRONG><a name="[382]"></a>LL_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[365]"></a>LL_InitConnectContext</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[2be]"></a>LL_PLUS_PerStats_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init (via Veneer)
</UL>

<P><STRONG><a name="[8e]"></a>LL_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[38d]"></a>LL_Rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd (via Veneer)
</UL>

<P><STRONG><a name="[173]"></a>LL_ReadRemoteUsedFeaturesCompleteCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[176]"></a>LL_ReadRemoteVersionInfoCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[100]"></a>LL_SetAdvParam0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam1 (via Veneer)
</UL>

<P><STRONG><a name="[101]"></a>LL_SetDataLengh0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetDataLengh1 (via Veneer)
</UL>

<P><STRONG><a name="[103]"></a>LL_SetScanParam0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanParam1 (via Veneer)
</UL>

<P><STRONG><a name="[29c]"></a>LL_TX_bm_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_bm_alloc (via Veneer)
</UL>

<P><STRONG><a name="[102]"></a>LL_evt_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
</UL>

<P><STRONG><a name="[117]"></a>WaitRTCCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_96MXtal_by_rcTracking (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Output (via Veneer)
</UL>

<P><STRONG><a name="[f8]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_int_register (via Veneer)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter (via Veneer)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg (via Veneer)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_get_pin (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd (via Veneer)
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralStateNotificationCB (via Veneer)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEAnalysisADVDATA (via Veneer)
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo (via Veneer)
</UL>

<P><STRONG><a name="[fe]"></a>clear_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[1b8]"></a>clk_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[154]"></a>disableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[fd]"></a>drv_disable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_soft_reset (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_is_lock (via Veneer)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSecAdvAllow1 (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llCalcMaxScanTime1 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[ff]"></a>drv_enable_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_is_lock (via Veneer)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSecAdvAllow1 (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llCalcMaxScanTime1 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[2ea]"></a>drv_irq_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
</UL>

<P><STRONG><a name="[10a]"></a>efuse_read</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check (via Veneer)
</UL>

<P><STRONG><a name="[155]"></a>enableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[161]"></a>getRxBufferSize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[18f]"></a>getTxBufferSize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[190]"></a>get_tx_read_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[160]"></a>llConnTerminate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[168]"></a>llDequeueCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[df]"></a>llEnqueueCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_StartEncrypt1 (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkReply (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkNegReply (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate1 (via Veneer)
</UL>

<P><STRONG><a name="[2c6]"></a>llInitFeatureSet2MPHY</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init (via Veneer)
</UL>

<P><STRONG><a name="[2c7]"></a>llInitFeatureSetDLE</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB (via Veneer)
</UL>

<P><STRONG><a name="[179]"></a>llPduLengthUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[15f]"></a>llPhyModeCtrlUpdateNotify</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[163]"></a>llProcessMasterControlProcedures</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[162]"></a>llProcessRxData</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[164]"></a>llProcessTxData</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[188]"></a>llProcessTxData0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData1 (via Veneer)
</UL>

<P><STRONG><a name="[1a5]"></a>llReleaseConnId</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[170]"></a>llReplaceCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[f3]"></a>llSecAdvAllow</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[f9]"></a>llSetupAdv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[17d]"></a>llSetupCTEReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[17f]"></a>llSetupCTERsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[177]"></a>llSetupDataLenghtReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[178]"></a>llSetupDataLenghtRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[16b]"></a>llSetupEncReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[181]"></a>llSetupEncRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[172]"></a>llSetupFeatureSetReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[174]"></a>llSetupFeatureSetRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[165]"></a>llSetupNextMasterEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[16f]"></a>llSetupPauseEncReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[171]"></a>llSetupPauseEncRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[17a]"></a>llSetupPhyReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[186]"></a>llSetupPhyRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[17b]"></a>llSetupPhyUpdateInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[17c]"></a>llSetupRejectExtInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[185]"></a>llSetupRejectInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1a6]"></a>llSetupScan</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[f4]"></a>llSetupSecAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[189]"></a>llSetupSecConnectableAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[f7]"></a>llSetupSecInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[18a]"></a>llSetupSecNonConnectableAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[f6]"></a>llSetupSecScan</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[18b]"></a>llSetupSecScannableAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[184]"></a>llSetupStartEncReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[167]"></a>llSetupTermInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[180]"></a>llSetupUnknownRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[16a]"></a>llSetupUpdateChanReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[169]"></a>llSetupUpdateParamReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[175]"></a>llSetupVersionIndReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1a0]"></a>ll_CalcRandomAddr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1a2]"></a>ll_ResolveRandomAddrs</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[e6]"></a>ll_debug_output</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[197]"></a>ll_getRPAListEntry</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[e9]"></a>ll_hw_clr_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[e7]"></a>ll_hw_get_irq_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[195]"></a>ll_hw_get_rfifo_depth</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[18e]"></a>ll_hw_get_tfifo_wrptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[e8]"></a>ll_hw_get_tr_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[19c]"></a>ll_hw_go</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[19f]"></a>ll_hw_ign_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[194]"></a>ll_hw_read_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[19d]"></a>ll_hw_rst_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[19e]"></a>ll_hw_rst_tfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1b3]"></a>ll_hw_set_crc_fmt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg (via Veneer)
</UL>

<P><STRONG><a name="[187]"></a>ll_hw_set_cte_txSupp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
</UL>

<P><STRONG><a name="[1bb]"></a>ll_hw_set_empty_head</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[1bd]"></a>ll_hw_set_loop_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[f5]"></a>ll_hw_set_rx_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[1bc]"></a>ll_hw_set_rx_timeout_1st</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[1a3]"></a>ll_hw_set_stx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1be]"></a>ll_hw_set_timing</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[19a]"></a>ll_hw_set_trx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[19b]"></a>ll_hw_set_trx_settle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[199]"></a>ll_hw_set_tx_rx_interval</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[1b5]"></a>ll_hw_tx2rx_timing_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini (via Veneer)
</UL>

<P><STRONG><a name="[18d]"></a>ll_hw_write_tfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[198]"></a>ll_isAddrInWhiteList</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[196]"></a>ll_isIrkAllZero</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[f0]"></a>ll_processBasicIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryAdvTRX (via Veneer)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[ea]"></a>ll_processExtAdvIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[ec]"></a>ll_processExtInitIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[eb]"></a>ll_processExtScanIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[ed]"></a>ll_processPrdAdvIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[ee]"></a>ll_processPrdScanIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[f2]"></a>ll_schedule_next_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[166]"></a>ll_scheduler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[10e]"></a>log_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hard_fault (via Veneer)
</UL>

<P><STRONG><a name="[1a4]"></a>move_to_master_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
</UL>

<P><STRONG><a name="[384]"></a>osal_CbTimerInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[90]"></a>osal_CbTimerProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[305]"></a>osal_CbTimerStart</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer (via Veneer)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer (via Veneer)
</UL>

<P><STRONG><a name="[210]"></a>osal_CbTimerStop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_CancelRssi (via Veneer)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer (via Veneer)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer (via Veneer)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStopRspTimer (via Veneer)
</UL>

<P><STRONG><a name="[337]"></a>osal_CbTimerUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites (via Veneer)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType (via Veneer)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpType (via Veneer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfo (via Veneer)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer (via Veneer)
</UL>

<P><STRONG><a name="[2aa]"></a>osal_bm_adjust_header</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket (via Veneer)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
</UL>

<P><STRONG><a name="[2a3]"></a>osal_bm_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg (via Veneer)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSarBufReset (via Veneer)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData (via Veneer)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd (via Veneer)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
</UL>

<P><STRONG><a name="[227]"></a>osal_get_timeoutEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[2d0]"></a>osal_init_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_init (via Veneer)
</UL>

<P><STRONG><a name="[1ee]"></a>osal_isbufset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList (via Veneer)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg (via Veneer)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding (via Veneer)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState (via Veneer)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondTotal (via Veneer)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond (via Veneer)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit (via Veneer)
</UL>

<P><STRONG><a name="[22a]"></a>osal_mem_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_data (via Veneer)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq (via Veneer)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest (via Veneer)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService (via Veneer)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_cfg (via Veneer)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing (via Veneer)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocScanRecs (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessSigningInfo (via Veneer)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIdentityInfo (via Veneer)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessEncryptionInformation (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo (via Veneer)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessSigningInfo (via Veneer)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIdentityInfo (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessEncryptionInformation (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
</UL>

<P><STRONG><a name="[22f]"></a>osal_mem_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_data (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond (via Veneer)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit (via Veneer)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_cfg (via Veneer)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState (via Veneer)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove (via Veneer)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink (via Veneer)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink (via Veneer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo (via Veneer)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
</UL>

<P><STRONG><a name="[364]"></a>osal_mem_set_heap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[144]"></a>osal_memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEAddDeviceInfo (via Veneer)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo (via Veneer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindScanRec (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingRandom (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRandom (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites (via Veneer)
</UL>

<P><STRONG><a name="[192]"></a>osal_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_Notify (via Veneer)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter (via Veneer)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_bytes_old (via Veneer)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_data (via Veneer)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_init (via Veneer)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq (via Veneer)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg (via Veneer)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_SetParameter (via Veneer)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_EstablishLink (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq (via Veneer)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate (via Veneer)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate (via Veneer)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond (via Veneer)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write (via Veneer)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_rsp (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService (via Veneer)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_scan_cb (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEGATTDiscoveryEvent (via Veneer)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEAnalysisADVDATA (via Veneer)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEAddDeviceInfo (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_ReadAttrCB (via Veneer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add (via Veneer)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB (via Veneer)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendSlaveSecurityReqEvent (via Veneer)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus (via Veneer)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInfoEvent (via Veneer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseWriteReq (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByTypeRsp (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByTypeReq (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseReadByGrpTypeRsp (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePrepareWriteReq (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseHandleValueInd (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseFindByTypeValueReq (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ConvertUUIDto128 (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildWriteReq (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadByTypeReq (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildPrepareWriteReq (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildFindByTypeValueReq (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadRsp (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadMultiRsp (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadByTypeRsp (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadByGrpTypeRsp (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildReadBlobRsp (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildPrepareWriteRsp (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildHandleValueInd (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_BuildFindInfoRsp (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq (via Veneer)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessSigningInfo (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingRandom (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingConfirm (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessMasterID (via Veneer)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIdentityInfo (via Veneer)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIdentityAddrInfo (via Veneer)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessEncryptionInformation (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID (via Veneer)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg (via Veneer)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm (via Veneer)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption (via Veneer)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessSigningInfo (via Veneer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp (via Veneer)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRandom (via Veneer)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessMasterID (via Veneer)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming (via Veneer)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIdentityInfo (via Veneer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIdentityAddrInfo (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessEncryptionInformation (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo (via Veneer)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType (via Veneer)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong (via Veneer)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType (via Veneer)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSigningInfo (via Veneer)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingRandom (via Veneer)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingConfirm (via Veneer)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseMasterID (via Veneer)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityInfo (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityAddrInfo (via Veneer)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseEncInfo (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildSigningInfo (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRandom (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingConfirm (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildMasterID (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildIdentityInfo (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildIdentityAddrInfo (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildEncInfo (via Veneer)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
</UL>

<P><STRONG><a name="[230]"></a>osal_memdup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond (via Veneer)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB (via Veneer)
</UL>

<P><STRONG><a name="[17e]"></a>osal_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg (via Veneer)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_SetNumPrepareWrites (via Veneer)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate (via Veneer)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter (via Veneer)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg (via Veneer)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds (via Veneer)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding (via Veneer)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate (via Veneer)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond (via Veneer)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init (via Veneer)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_rsp (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent (via Veneer)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB (via Veneer)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs (via Veneer)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent (via Veneer)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocScanRecs (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1 (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1 (via Veneer)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption (via Veneer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo (via Veneer)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp (via Veneer)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new (via Veneer)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey (via Veneer)
</UL>

<P><STRONG><a name="[276]"></a>osal_msg_allocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_timerCB (via Veneer)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent (via Veneer)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent (via Veneer)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB (via Veneer)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendSlaveSecurityReqEvent (via Veneer)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInfoEvent (via Veneer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus (via Veneer)
</UL>

<P><STRONG><a name="[1e3]"></a>osal_msg_deallocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_APP_Task_ProcessEvent (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_ProcessEvent (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent (via Veneer)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondRecvEvt (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_ProcessEvent (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[1e2]"></a>osal_msg_receive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_APP_Task_ProcessEvent (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_ProcessEvent (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_ProcessEvent (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[24f]"></a>osal_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_timerCB (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent (via Veneer)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent (via Veneer)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB (via Veneer)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter (via Veneer)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendSlaveSecurityReqEvent (via Veneer)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent (via Veneer)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInfoEvent (via Veneer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData (via Veneer)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus (via Veneer)
</UL>

<P><STRONG><a name="[2d1]"></a>osal_pwrmgr_device</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_init (via Veneer)
</UL>

<P><STRONG><a name="[39f]"></a>osal_rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo (via Veneer)
</UL>

<P><STRONG><a name="[20c]"></a>osal_revmemcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig (via Veneer)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1 (via Veneer)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new (via Veneer)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah (via Veneer)
</UL>

<P><STRONG><a name="[fb]"></a>osal_set_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIncSignCounter (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[13b]"></a>osal_start_reload_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sw_timer_start (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init (via Veneer)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
</UL>

<P><STRONG><a name="[2ce]"></a>osal_start_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[fc]"></a>osal_start_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_disconnect_cb (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_connect_fail (via Veneer)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentral_LinkDevice (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB (via Veneer)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt (via Veneer)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus (via Veneer)
</UL>

<P><STRONG><a name="[fa]"></a>osal_stop_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent (via Veneer)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_connect_ok (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_connect_fail (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_sleep_handler (via Veneer)
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt (via Veneer)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvControl1 (via Veneer)
</UL>

<P><STRONG><a name="[274]"></a>osal_strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
</UL>

<P><STRONG><a name="[e5]"></a>read_current_fine_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMasterEvt_TaskEndOk1 (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1 (via Veneer)
</UL>

<P><STRONG><a name="[1b7]"></a>rtc_get_counter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[1c0]"></a>setSleepMode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config (via Veneer)
</UL>

<P><STRONG><a name="[193]"></a>set_max_length</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX0 (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
</UL>

<P><STRONG><a name="[1b9]"></a>set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[115]"></a>spif_cmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
</UL>

<P><STRONG><a name="[15c]"></a>spif_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config (via Veneer)
</UL>

<P><STRONG><a name="[14e]"></a>spif_erase_sector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
</UL>

<P><STRONG><a name="[116]"></a>spif_rddata</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x (via Veneer)
</UL>

<P><STRONG><a name="[151]"></a>spif_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
</UL>

<P><STRONG><a name="[191]"></a>update_tx_read_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bb_rom_sym_m0.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer1 (via Veneer)
</UL>

<P><STRONG><a name="[1bf]"></a>init_config</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, patch.o(_section_xip_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_config
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSleepMode (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[1c2]"></a>TRNG_INIT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, patch.o(_section_xip_code_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand
</UL>

<P><STRONG><a name="[1c3]"></a>TRNG_Rand</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, patch.o(_section_xip_code_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
</UL>

<P><STRONG><a name="[41]"></a>ATT_BuildErrorRsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildErrorRsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ErrorRsp)
</UL>
<P><STRONG><a name="[42]"></a>ATT_BuildExchangeMTUReq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_ExchangeMTUReq)
</UL>
<P><STRONG><a name="[43]"></a>ATT_BuildExchangeMTURsp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildExchangeMTURsp))
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ExchangeMTURsp)
</UL>
<P><STRONG><a name="[44]"></a>ATT_BuildExecuteWriteReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_ExecuteWriteReq)
</UL>
<P><STRONG><a name="[45]"></a>ATT_BuildFindByTypeValueReq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, att_util.o(i.ATT_BuildFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_BuildFindByTypeValueReq
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_FindByTypeValueReq)
</UL>
<P><STRONG><a name="[46]"></a>ATT_BuildFindByTypeValueRsp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildFindByTypeValueRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildFindByTypeValueRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_FindByTypeValueRsp)
</UL>
<P><STRONG><a name="[47]"></a>ATT_BuildFindInfoReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildFindInfoReq))
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_FindInfoReq)
</UL>
<P><STRONG><a name="[48]"></a>ATT_BuildFindInfoRsp</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, att_util.o(i.ATT_BuildFindInfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ATT_BuildFindInfoRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_FindInfoRsp)
</UL>
<P><STRONG><a name="[49]"></a>ATT_BuildHandleValueInd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildHandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildHandleValueInd
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> att_server.o(i.ATT_HandleValueInd)
<LI> att_server.o(i.ATT_HandleValueNoti)
</UL>
<P><STRONG><a name="[4a]"></a>ATT_BuildPrepareWriteReq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildPrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildPrepareWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_PrepareWriteReq)
</UL>
<P><STRONG><a name="[4b]"></a>ATT_BuildPrepareWriteRsp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildPrepareWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildPrepareWriteRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_PrepareWriteRsp)
</UL>
<P><STRONG><a name="[4c]"></a>ATT_BuildReadBlobReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_BuildReadBlobReq))
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_ReadBlobReq)
</UL>
<P><STRONG><a name="[4d]"></a>ATT_BuildReadBlobRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadBlobRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadBlobRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadBlobRsp)
</UL>
<P><STRONG><a name="[4f]"></a>ATT_BuildReadByGrpTypeRsp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadByGrpTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadByGrpTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadByGrpTypeRsp)
</UL>
<P><STRONG><a name="[4e]"></a>ATT_BuildReadByTypeReq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadByTypeReq
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> att_client.o(i.ATT_ReadByGrpTypeReq)
<LI> att_client.o(i.ATT_ReadByTypeReq)
</UL>
<P><STRONG><a name="[50]"></a>ATT_BuildReadByTypeRsp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadByTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadByTypeRsp)
</UL>
<P><STRONG><a name="[51]"></a>ATT_BuildReadMultiRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadMultiRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadMultiRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadMultiRsp)
</UL>
<P><STRONG><a name="[52]"></a>ATT_BuildReadRsp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildReadRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.ATT_ReadRsp)
</UL>
<P><STRONG><a name="[53]"></a>ATT_BuildWriteReq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, att_util.o(i.ATT_BuildWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_BuildWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_client.o(i.ATT_WriteReq)
</UL>
<P><STRONG><a name="[1c4]"></a>ATT_CompareUUID</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, att_util.o(i.ATT_CompareUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ConvertUUIDto128
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpTypeReq
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType
</UL>

<P><STRONG><a name="[1c5]"></a>ATT_ConvertUUIDto128</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att_util.o(i.ATT_ConvertUUIDto128))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>

<P><STRONG><a name="[1c6]"></a>ATT_ErrorRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ErrorRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
</UL>

<P><STRONG><a name="[1c8]"></a>ATT_ExchangeMTUReq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att_client.o(i.ATT_ExchangeMTUReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ExchangeMTUReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ExchangeMTU
</UL>

<P><STRONG><a name="[1c9]"></a>ATT_ExchangeMTURsp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, att_server.o(i.ATT_ExchangeMTURsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ATT_ExchangeMTURsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[1cb]"></a>ATT_ExecuteWriteReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_client.o(i.ATT_ExecuteWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ExecuteWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleTimerCB
</UL>

<P><STRONG><a name="[1cc]"></a>ATT_ExecuteWriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ExecuteWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ExecuteWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>

<P><STRONG><a name="[1cd]"></a>ATT_FindByTypeValueReq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_client.o(i.ATT_FindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindByTypeValueReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[1ce]"></a>ATT_FindByTypeValueRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_FindByTypeValueRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindByTypeValueRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[1cf]"></a>ATT_FindInfoReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_client.o(i.ATT_FindInfoReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindInfoReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfo
</UL>

<P><STRONG><a name="[1d0]"></a>ATT_FindInfoRsp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, att_server.o(i.ATT_FindInfoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_FindInfoRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
</UL>

<P><STRONG><a name="[371]"></a>ATT_GetCurrentMTUSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, att_util.o(i.ATT_GetCurrentMTUSize))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralProcessGATTMsg
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
</UL>

<P><STRONG><a name="[1d1]"></a>ATT_HandleValueInd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_HandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[1d2]"></a>ATT_HandleValueNoti</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_HandleValueNoti))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
</UL>

<P><STRONG><a name="[288]"></a>ATT_InitMtuSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, att_util.o(i.ATT_InitMtuSize))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
</UL>

<P><STRONG><a name="[333]"></a>ATT_ParseErrorRsp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseErrorRsp))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
</UL>

<P><STRONG><a name="[a5]"></a>ATT_ParseExchangeMTUReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>ATT_ParseExchangeMTURsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExchangeMTURsp))
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.GATT_ExchangeMTU)
</UL>
<P><STRONG><a name="[b6]"></a>ATT_ParseExecuteWriteReq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>ATT_ParseExecuteWriteRsp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseExecuteWriteRsp))
<BR>[Address Reference Count : 2]<UL><LI> gatt_client.o(i.gattProcessReliableWrites)
<LI> gatt_client.o(i.gattProcessWriteLong)
</UL>
<P><STRONG><a name="[a9]"></a>ATT_ParseFindByTypeValueReq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseFindByTypeValueReq
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>ATT_ParseFindInfoReq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseFindInfoReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>ATT_ParseHandleValueInd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, att_util.o(i.ATT_ParseHandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParseHandleValueInd
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
</UL>

<P><STRONG><a name="[1d4]"></a>ATT_ParsePacket</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, att_util.o(i.ATT_ParsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ATT_ParsePacket &rArr; SM_VerifyAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>

<P><STRONG><a name="[b5]"></a>ATT_ParsePrepareWriteReq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, att_util.o(i.ATT_ParsePrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParsePrepareWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ATT_ParseReadBlobReq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseReadBlobReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>ATT_ParseReadByGrpTypeRsp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseReadByGrpTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseReadByGrpTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.GATT_DiscAllPrimaryServices)
</UL>
<P><STRONG><a name="[ab]"></a>ATT_ParseReadByTypeReq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, att_util.o(i.ATT_ParseReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATT_ParseReadByTypeReq
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>ATT_ParseReadByTypeRsp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseReadByTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.gattReadByType)
</UL>
<P><STRONG><a name="[b0]"></a>ATT_ParseReadMultiReq</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, att_util.o(i.ATT_ParseReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ATT_ParseReadMultiReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>ATT_ParseReadReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseReadReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>ATT_ParseWriteReq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, att_util.o(i.ATT_ParseWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_ParseWriteReq
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>ATT_ParseWriteRsp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, att_util.o(i.ATT_ParseWriteRsp))
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.gattWrite)
</UL>
<P><STRONG><a name="[1d6]"></a>ATT_PrepareWriteReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_client.o(i.ATT_PrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites
</UL>

<P><STRONG><a name="[1d7]"></a>ATT_PrepareWriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_PrepareWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_PrepareWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
</UL>

<P><STRONG><a name="[1d8]"></a>ATT_ReadBlobReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_client.o(i.ATT_ReadBlobReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadBlobReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[1d9]"></a>ATT_ReadBlobRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadBlobRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadBlobRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[1da]"></a>ATT_ReadByGrpTypeReq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, att_client.o(i.ATT_ReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByGrpTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllPrimaryServices
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpType
</UL>

<P><STRONG><a name="[1db]"></a>ATT_ReadByGrpTypeRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadByGrpTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByGrpTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
</UL>

<P><STRONG><a name="[1dc]"></a>ATT_ReadByTypeReq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, att_client.o(i.ATT_ReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType
</UL>

<P><STRONG><a name="[1dd]"></a>ATT_ReadByTypeRsp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
</UL>

<P><STRONG><a name="[1de]"></a>ATT_ReadMultiRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadMultiRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadMultiRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
</UL>

<P><STRONG><a name="[1df]"></a>ATT_ReadRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_ReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_ReadRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[2c8]"></a>ATT_SetMTUSizeMax</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, att_util.o(i.ATT_SetMTUSizeMax))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB
</UL>

<P><STRONG><a name="[1ca]"></a>ATT_UpdateMtuSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_util.o(i.ATT_UpdateMtuSize))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
</UL>

<P><STRONG><a name="[1e0]"></a>ATT_WriteReq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, att_client.o(i.ATT_WriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ATT_WriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_WriteNoRsp
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattWrite
</UL>

<P><STRONG><a name="[1e1]"></a>ATT_WriteRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_server.o(i.ATT_WriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ATT_WriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
</UL>

<P><STRONG><a name="[385]"></a>EC_APP_Task_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ec_app_task.o(i.EC_APP_Task_Init))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[9b]"></a>EC_APP_Task_ProcessEvent</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, ec_app_task.o(i.EC_APP_Task_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EC_APP_Task_ProcessEvent &rArr; GAPRole_TerminateConnection &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart1_rx_parse
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart0_rx_parse
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>GAPBondMgr_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gapbondmgr.o(i.GAPBondMgr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GAPBondMgr_Init &rArr; gapBondMgrReadBonds &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[1e9]"></a>GAPBondMgr_LinkEst</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, gapbondmgr.o(i.GAPBondMgr_LinkEst))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrSlaveSecurityReq
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrInvertCharCfgItem
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessGAPMsg
</UL>

<P><STRONG><a name="[97]"></a>GAPBondMgr_ProcessEvent</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gapbondmgr.o(i.GAPBondMgr_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = GAPBondMgr_ProcessEvent &rArr; GAPBondMgr_ServiceChangeInd &rArr; gapBondMgrSendServiceChange &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>GAPBondMgr_ProcessGAPMsg</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, gapbondmgr.o(i.GAPBondMgr_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = GAPBondMgr_ProcessGAPMsg &rArr; gapBondRecvEvt &rArr; gapBondMgr_SyncCharCfg &rArr; GAPBondMgr_UpdateCharCfg &rArr; gapBondMgrUpdateCharCfg &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_compact
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondRecvEvt
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseAllBondings
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessGAPMsg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
</UL>

<P><STRONG><a name="[204]"></a>GAPBondMgr_Register</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gapbondmgr.o(i.GAPBondMgr_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAPBondMgr_Register
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterForMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent
</UL>

<P><STRONG><a name="[1ea]"></a>GAPBondMgr_ResolveAddr</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, gapbondmgr.o(i.GAPBondMgr_ResolveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GAPBondMgr_ResolveAddr &rArr; gapBondMgrGetPublicAddr &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
</UL>

<P><STRONG><a name="[1f6]"></a>GAPBondMgr_ServiceChangeInd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gapbondmgr.o(i.GAPBondMgr_ServiceChangeInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = GAPBondMgr_ServiceChangeInd &rArr; gapBondMgrSendServiceChange &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_PerformFunc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrSendServiceChange
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
</UL>

<P><STRONG><a name="[1fd]"></a>GAPBondMgr_SetParameter</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, gapbondmgr.o(i.GAPBondMgr_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GAPBondMgr_SetParameter &rArr; gapBondMgrEraseAllBondings &rArr; gapBondMgrEraseBonding &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_compact
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseAllBondings
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
</UL>

<P><STRONG><a name="[1f7]"></a>GAPBondMgr_UpdateCharCfg</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gapbondmgr.o(i.GAPBondMgr_UpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = GAPBondMgr_UpdateCharCfg &rArr; gapBondMgrUpdateCharCfg &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessEvent
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
</UL>

<P><STRONG><a name="[20e]"></a>GAPCentralRole_CancelRssi</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, central.o(i.GAPCentralRole_CancelRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAPCentralRole_CancelRssi
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_RssiFind
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessGAPMsg
</UL>

<P><STRONG><a name="[211]"></a>GAPCentralRole_EstablishLink</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, central.o(i.GAPCentralRole_EstablishLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GAPCentralRole_EstablishLink &rArr; GAP_EstablishLinkReq &rArr; GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentral_LinkDevice
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB
</UL>

<P><STRONG><a name="[213]"></a>GAPCentralRole_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, central.o(i.GAPCentralRole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAPCentralRole_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_RegisterForHCIMsgs
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[96]"></a>GAPCentralRole_ProcessEvent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, central.o(i.GAPCentralRole_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = GAPCentralRole_ProcessEvent &rArr; gapCentralRole_ProcessOSALMsg &rArr; gapCentralRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessOSALMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>GAPCentralRole_SetParameter</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, central.o(i.GAPCentralRole_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAPCentralRole_SetParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
</UL>

<P><STRONG><a name="[217]"></a>GAPCentralRole_StartDevice</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, central.o(i.GAPCentralRole_StartDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GAPCentralRole_StartDevice &rArr; GAP_DeviceInit &rArr; GAP_CentDevMgrInit &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent
</UL>

<P><STRONG><a name="[219]"></a>GAPCentralRole_StartDiscovery</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, central.o(i.GAPCentralRole_StartDiscovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GAPCentralRole_StartDiscovery &rArr; GAP_DeviceDiscoveryRequest &rArr; GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent
</UL>

<P><STRONG><a name="[21b]"></a>GAPCentralRole_TerminateLink</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, central.o(i.GAPCentralRole_TerminateLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GAPCentralRole_TerminateLink &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_disconnect
</UL>

<P><STRONG><a name="[21c]"></a>GAPRole_GetParameter</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, peripheral.o(i.GAPRole_GetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAPRole_GetParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_connect_cb
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNotify
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralStateNotificationCB
</UL>

<P><STRONG><a name="[21e]"></a>GAPRole_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral.o(i.GAPRole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAPRole_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_RegisterForHCIMsgs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[95]"></a>GAPRole_ProcessEvent</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, peripheral.o(i.GAPRole_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GAPRole_ProcessEvent &rArr; GAPRole_SendUpdateParam &rArr; gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadRssiCmd (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[223]"></a>GAPRole_SendUpdateParam</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, peripheral.o(i.GAPRole_SendUpdateParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GAPRole_SendUpdateParam &rArr; gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[224]"></a>GAPRole_SetParameter</STRONG> (Thumb, 518 bytes, Stack size 32 bytes, peripheral.o(i.GAPRole_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GAPRole_SetParameter &rArr; gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_timeoutEx (via Veneer)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_ProcessEvent
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
</UL>

<P><STRONG><a name="[228]"></a>GAPRole_StartDevice</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peripheral.o(i.GAPRole_StartDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GAPRole_StartDevice &rArr; GAP_DeviceInit &rArr; GAP_CentDevMgrInit &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_ProcessEvent
</UL>

<P><STRONG><a name="[1e6]"></a>GAPRole_TerminateConnection</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripheral.o(i.GAPRole_TerminateConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GAPRole_TerminateConnection &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_APP_Task_ProcessEvent
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[229]"></a>GAP_Authenticate</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, gap_linkmgr.o(i.GAP_Authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GAP_Authenticate &rArr; SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessPairingReq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
</UL>

<P><STRONG><a name="[22e]"></a>GAP_Bond</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gap_linkmgr.o(i.GAP_Bond))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GAP_Bond &rArr; smStartEncryption
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartEncryption
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memdup (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
</UL>

<P><STRONG><a name="[232]"></a>GAP_CentConnRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.GAP_CentConnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAP_CentConnRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterCentralConn
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[234]"></a>GAP_CentDevMgrInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gap_centdevmgr.o(i.GAP_CentDevMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GAP_CentDevMgrInit &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterCentral
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocScanRecs
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[21a]"></a>GAP_DeviceDiscoveryRequest</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gap_centdevmgr.o(i.GAP_DeviceDiscoveryRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAP_DeviceDiscoveryRequest &rArr; GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanParamCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_StartDiscovery
</UL>

<P><STRONG><a name="[218]"></a>GAP_DeviceInit</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gap.o(i.GAP_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GAP_DeviceInit &rArr; GAP_CentDevMgrInit &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResponderInit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_InitiatorInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentConnRegister
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_StartDevice
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_StartDevice
</UL>

<P><STRONG><a name="[225]"></a>GAP_EndDiscoverable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_EndDiscoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_EndDiscoverable
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
</UL>

<P><STRONG><a name="[212]"></a>GAP_EstablishLinkReq</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, gap_centlinkmgr.o(i.GAP_EstablishLinkReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GAP_EstablishLinkReq &rArr; GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CreateConnCmd (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIsScanning
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_EstablishLink
</UL>

<P><STRONG><a name="[21d]"></a>GAP_GetParamValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gap_configmgr.o(i.GAP_GetParamValue))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingReq
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>

<P><STRONG><a name="[244]"></a>GAP_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap_task.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_Init &rArr; linkDB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_GAPTaskRegister (via Veneer)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[220]"></a>GAP_MakeDiscoverable</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_MakeDiscoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GAP_MakeDiscoverable &rArr; gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[200]"></a>GAP_NumActiveConnections</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap_task.o(i.GAP_NumActiveConnections))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_NumActive
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[23a]"></a>GAP_ParamsInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gap_configmgr.o(i.GAP_ParamsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_ParamsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadBDADDRCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[1f8]"></a>GAP_PasscodeUpdate</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, gap_linkmgr.o(i.GAP_PasscodeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GAP_PasscodeUpdate &rArr; SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>

<P><STRONG><a name="[23d]"></a>GAP_PeriDevMgrInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.GAP_PeriDevMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAP_PeriDevMgrInit &rArr; gapAllocAdvRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAllocAdvRecs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRegisterPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[93]"></a>GAP_ProcessEvent</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, gap_task.o(i.GAP_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GAP_ProcessEvent &rArr; gapProcessOSALMsg &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIsAdvertising
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[214]"></a>GAP_RegisterForHCIMsgs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_task.o(i.GAP_RegisterForHCIMsgs))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init
</UL>

<P><STRONG><a name="[208]"></a>GAP_ResolvePrivateAddr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap_devmgr.o(i.GAP_ResolvePrivateAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GAP_ResolvePrivateAddr &rArr; SM_ResolveRandomAddrs &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[23b]"></a>GAP_SecParamsInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gap_configmgr.o(i.GAP_SecParamsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAP_SecParamsInit &rArr; smGenerateRandBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[256]"></a>GAP_SendSlaveSecurityRequest</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GAP_SendSlaveSecurityRequest &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrSlaveSecurityReq
</UL>

<P><STRONG><a name="[205]"></a>GAP_SetParamValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gap_configmgr.o(i.GAP_SetParamValue))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Register
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
</UL>

<P><STRONG><a name="[1ef]"></a>GAP_Signable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gap_linkmgr.o(i.GAP_Signable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAP_Signable
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[1ff]"></a>GAP_TerminateAuth</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gap_linkmgr.o(i.GAP_TerminateAuth))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GAP_TerminateAuth &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>

<P><STRONG><a name="[1fc]"></a>GAP_TerminateLinkReq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gap_linkmgr.o(i.GAP_TerminateLinkReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd (via Veneer)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_TerminateLink
</UL>

<P><STRONG><a name="[226]"></a>GAP_UpdateAdvertisingData</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gap_peridevmgr.o(i.GAP_UpdateAdvertisingData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAP_UpdateAdvertisingData
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanRspDataCmd (via Veneer)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvDataCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
</UL>

<P><STRONG><a name="[25e]"></a>GATTServApp_AddService</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GATTServApp_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
</UL>

<P><STRONG><a name="[26b]"></a>GATTServApp_FindAttr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_FindAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATTServApp_FindAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCharCfg
</UL>

<P><STRONG><a name="[260]"></a>GATTServApp_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GATTServApp_Init &rArr; gattServApp_SetNumPrepareWrites
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_SetNumPrepareWrites
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterForReq
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[261]"></a>GATTServApp_InitCharCfg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_InitCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_app_AddService
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleConnStatusCB
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleProfile_AddService
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_HandleConnStatusCB
</UL>

<P><STRONG><a name="[266]"></a>GATTServApp_ProcessCCCWriteReq</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_ProcessCCCWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_WriteAttrCB
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_WriteAttrCB
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_WriteAttrCB
</UL>

<P><STRONG><a name="[26a]"></a>GATTServApp_ProcessCharCfg</STRONG> (Thumb, 128 bytes, Stack size 296 bytes, gattservapp.o(i.GATTServApp_ProcessCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = GATTServApp_ProcessCharCfg &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_FindAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_Notify
</UL>

<P><STRONG><a name="[98]"></a>GATTServApp_ProcessEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = GATTServApp_ProcessEvent &rArr; gattServApp_ProcessMsg &rArr; gattServApp_ProcessReadByTypeReq &rArr; ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[26c]"></a>GATTServApp_ReadAttr</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, gattservapp.o(i.GATTServApp_ReadAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GATTServApp_ReadAttr &rArr; GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCharCfg
</UL>

<P><STRONG><a name="[267]"></a>GATTServApp_ReadCharCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_ReadCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_Notify
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNotify
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[206]"></a>GATTServApp_RegisterForMsg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gattservapp.o(i.GATTServApp_RegisterForMsg))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Register
</UL>

<P><STRONG><a name="[25f]"></a>GATTServApp_RegisterService</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_app_AddService
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleProfile_AddService
</UL>

<P><STRONG><a name="[269]"></a>GATTServApp_SendCCCUpdatedEvent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_SendCCCUpdatedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[1f2]"></a>GATTServApp_SendServiceChangedInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_SendServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrSendServiceChange
</UL>

<P><STRONG><a name="[1f1]"></a>GATTServApp_UpdateCharCfg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_UpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr &rArr; GATT_FindHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[278]"></a>GATTServApp_WriteAttr</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, gattservapp.o(i.GATTServApp_WriteAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GATTServApp_WriteAttr &rArr; GATT_FindHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
</UL>

<P><STRONG><a name="[268]"></a>GATTServApp_WriteCharCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_WriteCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[279]"></a>GATT_AppCompletedMsg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gatt_task.o(i.GATT_AppCompletedMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_AppCompletedMsg &rArr; L2CAP_HostNumCompletedPkts
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[27b]"></a>GATT_DiscAllChars</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gatt_client.o(i.GATT_DiscAllChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = GATT_DiscAllChars &rArr; gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEGATTDiscoveryEvent
</UL>

<P><STRONG><a name="[27d]"></a>GATT_DiscAllPrimaryServices</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, gatt_client.o(i.GATT_DiscAllPrimaryServices))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = GATT_DiscAllPrimaryServices &rArr; ATT_ReadByGrpTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeReq
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent
</UL>

<P><STRONG><a name="[280]"></a>GATT_ExchangeMTU</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, gatt_client.o(i.GATT_ExchangeMTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GATT_ExchangeMTU &rArr; ATT_ExchangeMTUReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTUReq
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB
</UL>

<P><STRONG><a name="[272]"></a>GATT_FindHandle</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, gatt_server.o(i.GATT_FindHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GATT_FindHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteReq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadReq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadMultiReq
</UL>

<P><STRONG><a name="[281]"></a>GATT_FindHandleUUID</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gatt_server.o(i.GATT_FindHandleUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByTypeReq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpTypeReq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfoReq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[273]"></a>GATT_FindNextAttr</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gatt_server.o(i.GATT_FindNextAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GATT_FindNextAttr &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServiceLastHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
</UL>

<P><STRONG><a name="[26e]"></a>GATT_Indication</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gatt_server.o(i.GATT_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCharCfg
</UL>

<P><STRONG><a name="[286]"></a>GATT_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gatt_task.o(i.GATT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_Init &rArr; GATT_InitServer
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_InitMtuSize
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[289]"></a>GATT_InitClient</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gatt_client.o(i.GATT_InitClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_InitClient
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattRegisterClient
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
</UL>

<P><STRONG><a name="[287]"></a>GATT_InitServer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatt_server.o(i.GATT_InitServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATT_InitServer
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattRegisterServer
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
</UL>

<P><STRONG><a name="[26d]"></a>GATT_Notification</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gatt_server.o(i.GATT_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Notify
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNotify
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCharCfg
</UL>

<P><STRONG><a name="[94]"></a>GATT_ProcessEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gatt_task.o(i.GATT_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GATT_ProcessEvent &rArr; gattProcessRxData &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[2bd]"></a>GATT_RegisterForInd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_client.o(i.GATT_RegisterForInd))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
</UL>

<P><STRONG><a name="[263]"></a>GATT_RegisterForReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_server.o(i.GATT_RegisterForReq))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[275]"></a>GATT_RegisterService</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gatt_server.o(i.GATT_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>

<P><STRONG><a name="[277]"></a>GATT_ServiceChangedInd</STRONG> (Thumb, 70 bytes, Stack size 264 bytes, gatt_server.o(i.GATT_ServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
</UL>

<P><STRONG><a name="[346]"></a>GATT_ServiceNumAttrs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gatt_server.o(i.GATT_ServiceNumAttrs))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServiceLastHandle
</UL>

<P><STRONG><a name="[28d]"></a>GATT_VerifyReadPermissions</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gatt_server.o(i.GATT_VerifyReadPermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadReq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadMultiReq
</UL>

<P><STRONG><a name="[28e]"></a>GATT_VerifyWritePermissions</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gatt_server.o(i.GATT_VerifyWritePermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_VerifyWritePermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteReq
</UL>

<P><STRONG><a name="[28f]"></a>GATT_WriteCharValue</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gatt_client.o(i.GATT_WriteCharValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GATT_WriteCharValue &rArr; gattWrite &rArr; ATT_WriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_cfg
</UL>

<P><STRONG><a name="[291]"></a>GATT_WriteNoRsp</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gatt_client.o(i.GATT_WriteNoRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GATT_WriteNoRsp &rArr; ATT_WriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteReq
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_data
</UL>

<P><STRONG><a name="[292]"></a>GGS_AddService</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gapgattserver.o(i.GGS_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GGS_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
</UL>

<P><STRONG><a name="[293]"></a>GGS_SetParameter</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gapgattserver.o(i.GGS_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GGS_SetParameter &rArr; ggs_SetAttrWPermit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_SetAttrWPermit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondSetupPrivFlag
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
</UL>

<P><STRONG><a name="[5e]"></a>L2CAP_BuildCmdReject</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, l2cap_util.o(i.L2CAP_BuildCmdReject))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_if.o(i.L2CAP_CmdReject)
</UL>
<P><STRONG><a name="[60]"></a>L2CAP_BuildParamUpdateRsp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cap_util.o(i.L2CAP_BuildParamUpdateRsp))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_if.o(i.L2CAP_ConnParamUpdateRsp)
</UL>
<P><STRONG><a name="[296]"></a>L2CAP_CmdReject</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, l2cap_if.o(i.L2CAP_CmdReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[298]"></a>L2CAP_ConnParamUpdateReq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_ConnParamUpdateReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
</UL>

<P><STRONG><a name="[29a]"></a>L2CAP_ConnParamUpdateRsp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, l2cap_if.o(i.L2CAP_ConnParamUpdateRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = L2CAP_ConnParamUpdateRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt
</UL>

<P><STRONG><a name="[29b]"></a>L2CAP_Fragment_bm_alloc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l2cap_util.o(i.L2CAP_Fragment_bm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TX_bm_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
</UL>

<P><STRONG><a name="[27a]"></a>L2CAP_HostNumCompletedPkts</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_HostNumCompletedPkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_HostNumCompletedPkts
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HostNumCompletedPktCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessRxData
</UL>

<P><STRONG><a name="[29e]"></a>L2CAP_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, l2cap_task.o(i.L2CAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L2CAP_Init &rArr; l2capSarBufReset
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_L2CAPTaskRegister (via Veneer)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSarBufReset
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[37a]"></a>L2CAP_ParseParamUpdateReq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, l2cap_util.o(i.L2CAP_ParseParamUpdateReq))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[91]"></a>L2CAP_ProcessEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, l2cap_task.o(i.L2CAP_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = L2CAP_ProcessEvent &rArr; l2capProcessRxData &rArr; l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[2a2]"></a>L2CAP_ReassemblePkt_Reset</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, l2cap_util.o(i.L2CAP_ReassemblePkt_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_ReassemblePkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
</UL>

<P><STRONG><a name="[247]"></a>L2CAP_RegisterApp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, l2cap_if.o(i.L2CAP_RegisterApp))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[2a4]"></a>L2CAP_SegmentPkt_Reset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, l2cap_util.o(i.L2CAP_SegmentPkt_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2CAP_SegmentPkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[2a5]"></a>L2CAP_SendData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, l2cap_if.o(i.L2CAP_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[2a8]"></a>L2CAP_bm_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, l2cap_util.o(i.L2CAP_bm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_bm_alloc (via Veneer)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[252]"></a>SM_CalcRandomAddr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sm_mgr.o(i.SM_CalcRandomAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SM_CalcRandomAddr &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[2ac]"></a>SM_GenerateAuthenSig</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, sm_mgr.o(i.SM_GenerateAuthenSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapIncSignCounter
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSignCounter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
</UL>

<P><STRONG><a name="[2b1]"></a>SM_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sm_task.o(i.SM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SMPTaskRegister (via Veneer)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterApp
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[23c]"></a>SM_InitiatorInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sm_intpairing.o(i.SM_InitiatorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SM_InitiatorInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smRegisterInitiator
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[24b]"></a>SM_PasskeyUpdate</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sm_pairing.o(i.SM_PasskeyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SM_PasskeyUpdate &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
</UL>

<P><STRONG><a name="[92]"></a>SM_ProcessEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sm_task.o(i.SM_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SM_ProcessEvent &rArr; smProcessOSALMsg &rArr; smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[254]"></a>SM_ResolveRandomAddrs</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sm_mgr.o(i.SM_ResolveRandomAddrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SM_ResolveRandomAddrs &rArr; sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr
</UL>

<P><STRONG><a name="[23e]"></a>SM_ResponderInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sm_rsppairing.o(i.SM_ResponderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SM_ResponderInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smRegisterResponder
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
</UL>

<P><STRONG><a name="[c]"></a>SM_StartEncryption</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, sm_intpairing.o(i.SM_StartEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SM_StartEncryption
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_StartEncyptCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRandom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_intpairing.o(.data)
</UL>
<P><STRONG><a name="[22b]"></a>SM_StartPairing</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, sm_pairing.o(i.SM_StartPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>

<P><STRONG><a name="[1d5]"></a>SM_VerifyAuthenSig</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, sm_mgr.o(i.SM_VerifyAuthenSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SM_VerifyAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePacket
</UL>

<P><STRONG><a name="[2bc]"></a>SimpleBLECentral_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, simpleblecentral.o(i.SimpleBLECentral_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SimpleBLECentral_Init &rArr; GAPBondMgr_SetParameter &rArr; gapBondMgrEraseAllBondings &rArr; gapBondMgrEraseBonding &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_SetParameter
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PLUS_PerStats_Init (via Veneer)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterForInd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[9a]"></a>SimpleBLECentral_ProcessEvent</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, simpleblecentral.o(i.SimpleBLECentral_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = SimpleBLECentral_ProcessEvent &rArr; simpleBLECentralProcessGATTMsg &rArr; simpleBLEGATTDiscoveryEvent &rArr; GATT_DiscAllChars &rArr; gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_StartDiscovery
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_StartDevice
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Register
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllPrimaryServices
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_scan_cb
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_connect_fail
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralProcessGATTMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[2c2]"></a>SimpleBLEPeripheral_Init</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, simplebleperipheral.o(i.SimpleBLEPeripheral_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SimpleBLEPeripheral_Init &rArr; GAPRole_SetParameter &rArr; gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_RegisterForHCIMsgs
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_app_AddService
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llInitFeatureSet2MPHY (via Veneer)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llInitFeatureSetDLE (via Veneer)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PLUS_PerStats_Init (via Veneer)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_SetMTUSizeMax
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleProfile_RegisterAppCBs
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleProfile_AddService
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[99]"></a>SimpleBLEPeripheral_ProcessEvent</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, simplebleperipheral.o(i.SimpleBLEPeripheral_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SimpleBLEPeripheral_ProcessEvent &rArr; GAPRole_SetParameter &rArr; gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_StartDevice
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadResolvingListSizeCmd (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[2c3]"></a>SimpleProfile_AddService</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sbpprofile_ota.o(i.SimpleProfile_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SimpleProfile_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
</UL>

<P><STRONG><a name="[2c5]"></a>SimpleProfile_RegisterAppCBs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sbpprofile_ota.o(i.SimpleProfile_RegisterAppCBs))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
</UL>

<P><STRONG><a name="[10f]"></a>WaitMs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clock.o(i.WaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaitMs
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_delay_ms (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_disconnect_link
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hard_fault (via Veneer)
</UL>

<P><STRONG><a name="[2ca]"></a>Watchdog_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, watchdog.o(i.Watchdog_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Watchdog_Init &rArr; watchdog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[9c]"></a>Watchdog_ProcessEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, watchdog.o(i.Watchdog_ProcessEvent))
<BR>[Address Reference Count : 1]<UL><LI> osal_simpleble.o(.constdata)
</UL>
<P><STRONG><a name="[2cd]"></a>app_main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, simpleble_main.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_main
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_main_loop_run
</UL>

<P><STRONG><a name="[2cf]"></a>app_main_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simpleble_main.o(i.app_main_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_main_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_device (via Veneer)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[1c7]"></a>attSendMsg</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, att_util.o(i.attSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueNoti
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_HandleValueInd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteReq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeReq
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeReq
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobReq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteReq
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoReq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueReq
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteReq
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTUReq
</UL>

<P><STRONG><a name="[2d2]"></a>bleuart_Notify</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sbpprofile_ota.o(i.bleuart_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = bleuart_Notify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_bytes_old
</UL>

<P><STRONG><a name="[239]"></a>dbg_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, my_printf.o(i.dbg_printf))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_data
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_app_AddService
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_WriteAttrCB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_ReadAttrCB
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ota_version
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralStateNotificationCB
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_cfg
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEGATTDiscoveryEvent
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentral_LinkDevice
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralRssiCB
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralProcessGATTMsg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralPasscodeCB
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralPairStateCB
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB
</UL>

<P><STRONG><a name="[398]"></a>ec_ble_central_bond_check</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ec_ble_central.o(i.ec_ble_central_bond_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ec_ble_central_bond_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentral_LinkDevice
</UL>

<P><STRONG><a name="[2c1]"></a>ec_ble_central_connect_fail</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, simpleblecentral.o(i.ec_ble_central_connect_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_ble_central_connect_fail
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_cfg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB
</UL>

<P><STRONG><a name="[2d4]"></a>ec_ble_central_connect_ok</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, simpleblecentral.o(i.ec_ble_central_connect_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_ble_central_connect_ok
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_cfg
</UL>

<P><STRONG><a name="[2d5]"></a>ec_ble_central_disconnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, simpleblecentral.o(i.ec_ble_central_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ec_ble_central_disconnect &rArr; GAPCentralRole_TerminateLink &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_TerminateLink
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_data
</UL>

<P><STRONG><a name="[2d6]"></a>ec_ble_central_disconnect_cb</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, simpleblecentral.o(i.ec_ble_central_disconnect_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_ble_central_disconnect_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB
</UL>

<P><STRONG><a name="[397]"></a>ec_ble_central_rev_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, simpleblecentral.o(i.ec_ble_central_rev_data))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralProcessGATTMsg
</UL>

<P><STRONG><a name="[2c0]"></a>ec_ble_central_scan_cb</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, simpleblecentral.o(i.ec_ble_central_scan_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ec_ble_central_scan_cb &rArr; simpleBLECentral_LinkDevice &rArr; GAPCentralRole_EstablishLink &rArr; GAP_EstablishLinkReq &rArr; GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentral_LinkDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent
</UL>

<P><STRONG><a name="[2d8]"></a>ec_ble_central_send_data</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, simpleblecentral.o(i.ec_ble_central_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ec_ble_central_send_data &rArr; GATT_WriteNoRsp &rArr; ATT_WriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_disconnect
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_WriteNoRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_package
</UL>

<P><STRONG><a name="[2d9]"></a>ec_ble_central_send_package</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ec_ble_central.o(i.ec_ble_central_send_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ec_ble_central_send_package &rArr; ec_ble_central_send_data &rArr; GATT_WriteNoRsp &rArr; ATT_WriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_send
</UL>

<P><STRONG><a name="[2da]"></a>ec_ble_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ec_ble.o(i.ec_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ec_ble_init &rArr; ec_core_ble_peripheral_set_default_name &rArr; ec_core_ble_get_mac &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_default_name
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_128bit_uuid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[2dd]"></a>ec_ble_peripheral_connect_cb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ec_ble_peripheral.o(i.ec_ble_peripheral_connect_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ec_ble_peripheral_connect_cb &rArr; GAPRole_GetParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralStateNotificationCB
</UL>

<P><STRONG><a name="[389]"></a>ec_ble_peripheral_disconnect_cb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ec_ble_peripheral.o(i.ec_ble_peripheral_disconnect_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_ble_peripheral_disconnect_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralStateNotificationCB
</UL>

<P><STRONG><a name="[39a]"></a>ec_ble_peripheral_notification_disable_cb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ec_ble_peripheral.o(i.ec_ble_peripheral_notification_disable_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_WriteAttrCB
</UL>

<P><STRONG><a name="[399]"></a>ec_ble_peripheral_notification_enable_cb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ec_ble_peripheral.o(i.ec_ble_peripheral_notification_enable_cb))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_WriteAttrCB
</UL>

<P><STRONG><a name="[2de]"></a>ec_ble_peripheral_receive_data</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ec_ble_peripheral.o(i.ec_ble_peripheral_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ec_ble_peripheral_receive_data
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_WriteAttrCB
</UL>

<P><STRONG><a name="[2df]"></a>ec_ble_peripheral_send_bytes</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ec_ble_peripheral.o(i.ec_ble_peripheral_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = ec_ble_peripheral_send_bytes &rArr; simpleProfile_Notify &rArr; GATTServApp_ProcessCharCfg &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_Notify
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_bytes_old
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_package
</UL>

<P><STRONG><a name="[2e0]"></a>ec_ble_peripheral_send_bytes_old</STRONG> (Thumb, 44 bytes, Stack size 264 bytes, ec_ble_peripheral.o(i.ec_ble_peripheral_send_bytes_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = ec_ble_peripheral_send_bytes_old &rArr; bleuart_Notify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleuart_Notify
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_bytes
</UL>

<P><STRONG><a name="[2e2]"></a>ec_ble_peripheral_send_package</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ec_ble_peripheral.o(i.ec_ble_peripheral_send_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = ec_ble_peripheral_send_package &rArr; ec_ble_peripheral_send_bytes &rArr; simpleProfile_Notify &rArr; GATTServApp_ProcessCharCfg &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_send
</UL>

<P><STRONG><a name="[2db]"></a>ec_config_128bit_uuid</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sbpprofile_ota.o(i.ec_config_128bit_uuid))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_init
</UL>

<P><STRONG><a name="[13c]"></a>ec_core_ble_get_link_state</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ec_core_ble.o(i.ec_core_ble_get_link_state))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sw_watchdog_10s_task (via Veneer)
</UL>

<P><STRONG><a name="[120]"></a>ec_core_ble_get_mac</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ec_core_ble.o(i.ec_core_ble_get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_core_ble_get_mac &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_default_name
</UL>

<P><STRONG><a name="[2dc]"></a>ec_core_ble_peripheral_set_default_name</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, ec_core_ble_peripheral.o(i.ec_core_ble_peripheral_set_default_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ec_core_ble_peripheral_set_default_name &rArr; ec_core_ble_get_mac &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_name
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_get_mac
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ec_core_ble_peripheral_set_name
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_init
</UL>

<P><STRONG><a name="[126]"></a>ec_core_ble_peripheral_set_event_cb</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ec_core_ble_peripheral.o(i.ec_core_ble_peripheral_set_event_cb))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_register_event (via Veneer)
</UL>

<P><STRONG><a name="[122]"></a>ec_core_ble_peripheral_set_name</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ec_core_ble_peripheral.o(i.ec_core_ble_peripheral_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ec_core_ble_peripheral_set_name &rArr; _ec_core_ble_peripheral_set_name
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ec_core_ble_peripheral_set_name
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_default_name
</UL>

<P><STRONG><a name="[11f]"></a>ec_core_ble_peripheral_set_ota_en</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ec_core_ble_peripheral.o(i.ec_core_ble_peripheral_set_ota_en))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init (via Veneer)
</UL>

<P><STRONG><a name="[127]"></a>ec_core_ble_peripheral_set_receive_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ec_core_ble_peripheral.o(i.ec_core_ble_peripheral_set_receive_cb))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_register_event (via Veneer)
</UL>

<P><STRONG><a name="[143]"></a>ec_core_ble_send</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ec_core_ble.o(i.ec_core_ble_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = ec_core_ble_send &rArr; ec_ble_peripheral_send_package &rArr; ec_ble_peripheral_send_bytes &rArr; simpleProfile_Notify &rArr; GATTServApp_ProcessCharCfg &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_package
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_send_package
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failling (via Veneer)
</UL>

<P><STRONG><a name="[11e]"></a>ec_core_ble_set_ruuid</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ec_core_ble.o(i.ec_core_ble_set_ruuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_core_ble_set_ruuid &rArr; uuid_str_to_num
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_str_to_num
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init (via Veneer)
</UL>

<P><STRONG><a name="[11d]"></a>ec_core_ble_set_suuid</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ec_core_ble.o(i.ec_core_ble_set_suuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_core_ble_set_suuid &rArr; uuid_str_to_num
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_str_to_num
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init (via Veneer)
</UL>

<P><STRONG><a name="[12b]"></a>ec_core_flash_erase_sector</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ec_core_flash.o(i.ec_core_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ec_core_flash_erase_sector &rArr; hal_flash_erase_sector &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sector_select_set (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_safe_write (via Veneer)
</UL>

<P><STRONG><a name="[2e5]"></a>ec_core_flash_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ec_core_flash.o(i.ec_core_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ec_core_flash_init &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[12e]"></a>ec_core_flash_read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ec_core_flash.o(i.ec_core_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ec_core_flash_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sector_select_get (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_read (via Veneer)
</UL>

<P><STRONG><a name="[12c]"></a>ec_core_flash_write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ec_core_flash.o(i.ec_core_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ec_core_flash_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sector_select_set (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_safe_write (via Veneer)
</UL>

<P><STRONG><a name="[2e6]"></a>ec_core_gpio_get_pin</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, ec_core_gpio.o(i.ec_core_gpio_get_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ec_core_gpio_get_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_out_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_int_register
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_in_init
</UL>

<P><STRONG><a name="[1ab]"></a>ec_core_gpio_in_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ec_core_gpio.o(i.ec_core_gpio_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ec_core_gpio_in_init &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_get_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[1ac]"></a>ec_core_gpio_int_register</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, ec_core_gpio.o(i.ec_core_gpio_int_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ec_core_gpio_int_register &rArr; hal_gpioin_register &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_register
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_get_pin
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[d4]"></a>ec_core_gpio_out_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ec_core_gpio.o(i.ec_core_gpio_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ec_core_gpio_out_init &rArr; hal_gpioretention_register &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioretention_register
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_get_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_receive_event (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_task (via Veneer)
</UL>

<P><STRONG><a name="[65]"></a>ec_core_gpio_p0_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p0_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[6f]"></a>ec_core_gpio_p10_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p10_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[66]"></a>ec_core_gpio_p1_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p1_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[67]"></a>ec_core_gpio_p2_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p2_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[68]"></a>ec_core_gpio_p3_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p3_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[69]"></a>ec_core_gpio_p4_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p4_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[6a]"></a>ec_core_gpio_p5_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p5_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[6b]"></a>ec_core_gpio_p6_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p6_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[6c]"></a>ec_core_gpio_p7_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p7_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[6d]"></a>ec_core_gpio_p8_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p8_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[6e]"></a>ec_core_gpio_p9_int</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ec_core_gpio.o(i.ec_core_gpio_p9_int))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_gpio.o(i.ec_core_gpio_int_register)
</UL>
<P><STRONG><a name="[1a8]"></a>ec_core_init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, ec_core.o(i.ec_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ec_core_init &rArr; ec_ble_init &rArr; ec_core_ble_peripheral_set_default_name &rArr; ec_core_ble_get_mac &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxl_Watchdog_Init_func
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_patch_slave (via Veneer)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_patch_master (via Veneer)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_LowCurrentLdo_enable (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sleep_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_init (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init (via Veneer)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[1ad]"></a>ec_core_main_loop_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ec_core.o(i.ec_core_main_loop_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_core_main_loop_run &rArr; app_main
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[1aa]"></a>ec_core_sleep_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ec_core_sleep.o(i.ec_core_sleep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ec_core_sleep_disable &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_is_lock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[2f1]"></a>ec_core_sleep_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ec_core_sleep.o(i.ec_core_sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ec_core_sleep_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[1a7]"></a>ec_core_sys_clk_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ec_core_clk.o(i.ec_core_sys_clk_set))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[13d]"></a>ec_core_sys_soft_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ec_core.o(i.ec_core_sys_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_core_sys_soft_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_soft_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sw_watchdog_10s_task (via Veneer)
</UL>

<P><STRONG><a name="[124]"></a>ec_core_uart0_printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, my_printf.o(i.ec_core_uart0_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ec_core_uart0_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_notify_enable_event (via Veneer)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_notify_disable_event (via Veneer)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_disconnect_event (via Veneer)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_connect_event (via Veneer)
</UL>

<P><STRONG><a name="[1e4]"></a>ec_core_uart0_rx_parse</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ec_core_uart.o(i.ec_core_uart0_rx_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_core_uart0_rx_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_APP_Task_ProcessEvent
</UL>

<P><STRONG><a name="[1e5]"></a>ec_core_uart1_rx_parse</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ec_core_uart.o(i.ec_core_uart1_rx_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_core_uart1_rx_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_APP_Task_ProcessEvent
</UL>

<P><STRONG><a name="[1a9]"></a>ec_core_ver</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ec_core.o(i.ec_core_ver))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[241]"></a>gapAddAddrAdj</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapAddAddrAdj))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessNewAddr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[5]"></a>gapCancelLinkReq</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gap_centlinkmgr.o(i.gapCancelLinkReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapCancelLinkReq
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CreateConnCancelCmd (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_centdevmgr.o(.data)
</UL>
<P><STRONG><a name="[310]"></a>gapDetermineAddrType</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapDetermineAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo
</UL>

<P><STRONG><a name="[306]"></a>gapFindADType</STRONG> (Thumb, 72 bytes, Stack size 36 bytes, gap_devmgr.o(i.gapFindADType))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapValidADType
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
</UL>

<P><STRONG><a name="[243]"></a>gapFreeEstLink</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_linkmgr.o(i.gapFreeEstLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapFreeEstLink
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapTerminateConnComplete
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessCreateLLConnCmdStatus
</UL>

<P><STRONG><a name="[3a7]"></a>gapGetDevAddress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[3a6]"></a>gapGetDevAddressMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetDevAddressMode))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[251]"></a>gapGetIRK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetIRK))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[2ae]"></a>gapGetSRK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetSRK))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[2ad]"></a>gapGetSignCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_configmgr.o(i.gapGetSignCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[2b0]"></a>gapIncSignCounter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapIncSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapIncSignCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[250]"></a>gapIsAdvertising</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gap_devmgr.o(i.gapIsAdvertising))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[240]"></a>gapIsScanning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gap_devmgr.o(i.gapIsScanning))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq
</UL>

<P><STRONG><a name="[309]"></a>gapPairingCompleteCB</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, gap_linkmgr.o(i.gapPairingCompleteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memdup (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>

<P><STRONG><a name="[30b]"></a>gapPasskeyNeededCB</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gap_linkmgr.o(i.gapPasskeyNeededCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapPasskeyNeededCB
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
</UL>

<P><STRONG><a name="[314]"></a>gapProcessConnUpdateCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_centlinkmgr.o(i.gapProcessConnUpdateCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessConnUpdateCmdStatus &rArr; gapSendLinkUpdateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>

<P><STRONG><a name="[316]"></a>gapProcessConnUpdateCompleteEvt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_linkmgr.o(i.gapProcessConnUpdateCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessConnUpdateCompleteEvt &rArr; gapSendLinkUpdateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[317]"></a>gapProcessConnectionCompleteEvt</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, gap_linkmgr.o(i.gapProcessConnectionCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapProcessConnectionCompleteEvt &rArr; linkDB_Add &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapDetermineAddrType
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[313]"></a>gapProcessCreateLLConnCmdStatus</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gap_centlinkmgr.o(i.gapProcessCreateLLConnCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapProcessCreateLLConnCmdStatus &rArr; sendEstLinkEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEstLinkEvent
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>

<P><STRONG><a name="[31b]"></a>gapProcessDisconnectCompleteEvt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gap_linkmgr.o(i.gapProcessDisconnectCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessDisconnectCompleteEvt &rArr; linkDB_Remove &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SegmentPkt_Reset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTerminateEvent
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[311]"></a>gapProcessL2CAPSignalEvt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, gap_centlinkmgr.o(i.gapProcessL2CAPSignalEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gapProcessL2CAPSignalEvt &rArr; L2CAP_ConnParamUpdateRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnUpdateCmd (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ValidConnTimeParams (via Veneer)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>

<P><STRONG><a name="[253]"></a>gapProcessNewAddr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapProcessNewAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapProcessNewAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetRandomAddressCmd (via Veneer)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[31e]"></a>gapProcessRandomAddrComplete</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gap_configmgr.o(i.gapProcessRandomAddrComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapProcessRandomAddrComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[320]"></a>gapReadBD_ADDRStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gap_configmgr.o(i.gapReadBD_ADDRStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapReadBD_ADDRStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadBufSizeCmd (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[31f]"></a>gapReadBufSizeCmdStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gap_configmgr.o(i.gapReadBufSizeCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapReadBufSizeCmdStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInitDoneEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[236]"></a>gapRegisterCentral</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_task.o(i.gapRegisterCentral))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
</UL>

<P><STRONG><a name="[233]"></a>gapRegisterCentralConn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_linkmgr.o(i.gapRegisterCentralConn))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentConnRegister
</UL>

<P><STRONG><a name="[24c]"></a>gapRegisterPeripheral</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gap_task.o(i.gapRegisterPeripheral))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
</UL>

<P><STRONG><a name="[329]"></a>gapSendBondCompleteEvent</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gap_linkmgr.o(i.gapSendBondCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapSendBondCompleteEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
</UL>

<P><STRONG><a name="[315]"></a>gapSendLinkUpdateEvent</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, gap_linkmgr.o(i.gapSendLinkUpdateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapSendLinkUpdateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCompleteEvt
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCmdStatus
</UL>

<P><STRONG><a name="[32b]"></a>gapSendPairingReqEvent</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, gap_linkmgr.o(i.gapSendPairingReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapSendPairingReqEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[32d]"></a>gapSendSlaveSecurityReqEvent</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, gap_configmgr.o(i.gapSendSlaveSecurityReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapSendSlaveSecurityReqEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[9]"></a>gapSetAdvParams</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, gap_peridevmgr.o(i.gapSetAdvParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gapSetAdvParams &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvParamCmd (via Veneer)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapAddAddrAdj
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[30c]"></a>gapSetAdvParamsStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapSetAdvParamsStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapSetAdvParamsStatus &rArr; gapSendMakeDiscEvent &rArr; gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetAdvEnableCmd (via Veneer)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[303]"></a>gapSetScanParamStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gap_centdevmgr.o(i.gapSetScanParamStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapSetScanParamStatus &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentProcessHCICmdEvt
</UL>

<P><STRONG><a name="[312]"></a>gapTerminateConnComplete</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gap_centlinkmgr.o(i.gapTerminateConnComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapTerminateConnComplete &rArr; gapFreeEstLink
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeEstLink
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnEvt
</UL>

<P><STRONG><a name="[2bb]"></a>gapUpdateConnSignCounter</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gap_configmgr.o(i.gapUpdateConnSignCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapUpdateConnSignCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
</UL>

<P><STRONG><a name="[307]"></a>gapValidADType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gap_devmgr.o(i.gapValidADType))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
</UL>

<P><STRONG><a name="[30e]"></a>gapWriteAdvDataStatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapWriteAdvDataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapWriteAdvDataStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[30d]"></a>gapWriteAdvEnableStatus</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, gap_peridevmgr.o(i.gapWriteAdvEnableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gapWriteAdvEnableStatus &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLimitedDiscoverableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPeriProcessHCICmdCompleteEvt
</UL>

<P><STRONG><a name="[331]"></a>gattNotifyEvent</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, gatt_task.o(i.gattNotifyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleTimerCB
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleTimerCB
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleConnStatusCB
</UL>

<P><STRONG><a name="[28a]"></a>gattRegisterClient</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_task.o(i.gattRegisterClient))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient
</UL>

<P><STRONG><a name="[28b]"></a>gattRegisterServer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_task.o(i.gattRegisterServer))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
</UL>

<P><STRONG><a name="[285]"></a>gattStartTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gatt_task.o(i.gattStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo
</UL>

<P><STRONG><a name="[33c]"></a>gattStopTimer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_task.o(i.gattStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
</UL>

<P><STRONG><a name="[b9]"></a>hal_DMA_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dma.o(i.hal_DMA_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_DMA_IRQHandler &rArr; hal_dma_stop_channel &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_stop_channel
</UL>

<P><STRONG><a name="[78]"></a>hal_GPIO_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.hal_GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_GPIO_IRQHandler &rArr; hal_gpioin_event &rArr; hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpioin_register)
</UL>
<P><STRONG><a name="[ba]"></a>hal_SPI0_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi.o(i.hal_SPI0_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_SPI0_IRQHandler &rArr; spis_int_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spis_int_handle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_handle
</UL>

<P><STRONG><a name="[bb]"></a>hal_SPI1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(i.hal_SPI1_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_SPI1_IRQHandler &rArr; spis_int_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spis_int_handle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_handle
</UL>

<P><STRONG><a name="[7b]"></a>hal_TIMER5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.hal_TIMER5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.hal_timer_set)
</UL>
<P><STRONG><a name="[7c]"></a>hal_TIMER6_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.hal_TIMER6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.hal_timer_set)
</UL>
<P><STRONG><a name="[bc]"></a>hal_UART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart.o(i.hal_UART1_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_UART1_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>

<P><STRONG><a name="[14a]"></a>hal_clk_gate_disable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(i.hal_clk_gate_disable))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_stop (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
</UL>

<P><STRONG><a name="[15d]"></a>hal_clk_gate_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(i.hal_clk_gate_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_set
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[34b]"></a>hal_dma_stop_channel</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dma.o(i.hal_dma_stop_channel), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_dma_stop_channel &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_DMA_IRQHandler
</UL>

<P><STRONG><a name="[34f]"></a>hal_fs_garbage_collect</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, fs.o(i.hal_fs_garbage_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector (via Veneer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
</UL>

<P><STRONG><a name="[351]"></a>hal_fs_get_free_size</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fs.o(i.hal_fs_get_free_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_fs_get_free_size
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
</UL>

<P><STRONG><a name="[352]"></a>hal_fs_get_garbage_size</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs.o(i.hal_fs_get_garbage_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hal_fs_get_garbage_size &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
</UL>

<P><STRONG><a name="[353]"></a>hal_fs_item_del</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, fs.o(i.hal_fs_item_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hal_fs_item_del &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_find_id
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
</UL>

<P><STRONG><a name="[354]"></a>hal_fs_item_find_id</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fs.o(i.hal_fs_item_find_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
</UL>

<P><STRONG><a name="[355]"></a>hal_fs_item_read</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, fs.o(i.hal_fs_item_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_find_id
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>

<P><STRONG><a name="[356]"></a>hal_fs_item_write</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, fs.o(i.hal_fs_item_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hal_fs_item_write &rArr; hal_fs_item_del &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_find_id
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_free_size
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
</UL>

<P><STRONG><a name="[147]"></a>hal_gpio_cfg_analog_io</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, gpio.o(i.hal_gpio_cfg_analog_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_stop (via Veneer)
</UL>

<P><STRONG><a name="[359]"></a>hal_gpio_fmux</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_fmux))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_handle
</UL>

<P><STRONG><a name="[2f0]"></a>hal_gpio_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_gpio_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[35a]"></a>hal_gpio_pin2pin3_control</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_pin2pin3_control))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[148]"></a>hal_gpio_pin_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin2pin3_control
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_out_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_in_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_stop (via Veneer)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioretention_register
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_disable
</UL>

<P><STRONG><a name="[149]"></a>hal_gpio_pull_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_pull_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_in_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_stop (via Veneer)
</UL>

<P><STRONG><a name="[35c]"></a>hal_gpio_read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_read))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[35d]"></a>hal_gpio_wakeup_set</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gpio.o(i.hal_gpio_wakeup_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_gpio_wakeup_set &rArr; hal_gpio_wakeup_control
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_control
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[2e8]"></a>hal_gpio_write</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gpio.o(i.hal_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpio_write &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_out_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[361]"></a>hal_gpioin_disable</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, gpio.o(i.hal_gpioin_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_gpioin_disable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_register
</UL>

<P><STRONG><a name="[35e]"></a>hal_gpioin_enable</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(i.hal_gpioin_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_register
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[2e7]"></a>hal_gpioin_register</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gpio.o(i.hal_gpioin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hal_gpioin_register &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_int_register
</UL>

<P><STRONG><a name="[2e9]"></a>hal_gpioretention_register</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gpio.o(i.hal_gpioretention_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpioretention_register &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_out_init
</UL>

<P><STRONG><a name="[2ed]"></a>hal_rtc_clock_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, clock.o(i.hal_rtc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_rtc_clock_config &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[110]"></a>hal_system_soft_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock.o(i.hal_system_soft_reset))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sys_soft_reset
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleConnStatusCB
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hard_fault (via Veneer)
</UL>

<P><STRONG><a name="[135]"></a>hal_timer_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.hal_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_timer_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_init (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>hal_timer_set</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, timer.o(i.hal_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_set_loadtimer
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_start (via Veneer)
</UL>

<P><STRONG><a name="[7a]"></a>hal_timer_sleep_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.hal_timer_sleep_handler))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.hal_timer_init)
</UL>
<P><STRONG><a name="[139]"></a>hal_timer_stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timer.o(i.hal_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_disable
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop_counter
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_stop (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_init
</UL>

<P><STRONG><a name="[2cc]"></a>hal_uart_send_buff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.hal_uart_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart0_putc
</UL>

<P><STRONG><a name="[37c]"></a>l2capAllocChannel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capAllocChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capAllocChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>

<P><STRONG><a name="[5f]"></a>l2capBuildParamUpdateReq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capBuildParamUpdateReq))
<BR>[Address Reference Count : 1]<UL><LI> l2cap_if.o(i.L2CAP_ConnParamUpdateReq)
</UL>
<P><STRONG><a name="[2a7]"></a>l2capEncapSendData</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capEncapSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
</UL>

<P><STRONG><a name="[373]"></a>l2capFindLocalId</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capFindLocalId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capFindLocalId
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[377]"></a>l2capFreeChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capFreeChannel))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
</UL>

<P><STRONG><a name="[37b]"></a>l2capHandleRxError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capHandleRxError))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[36f]"></a>l2capNotifyData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capNotifyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2capNotifyData
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[36e]"></a>l2capNotifySignal</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, l2cap_util.o(i.l2capNotifySignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleTimerCB
</UL>

<P><STRONG><a name="[374]"></a>l2capParseCmdReject</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseCmdReject))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[370]"></a>l2capParsePacket</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capParsePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capParsePacket &rArr; L2CAP_ReassemblePkt_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ReassemblePkt_Reset
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_adjust_header (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[375]"></a>l2capParseParamUpdateRsp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseParamUpdateRsp))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[379]"></a>l2capParseSignalHdr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, l2cap_util.o(i.l2capParseSignalHdr))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[36d]"></a>l2capPktToSegmentBuff</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, l2cap_util.o(i.l2capPktToSegmentBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetCurrentMTUSize
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_bm_alloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>

<P><STRONG><a name="[2a0]"></a>l2capSarBufReset</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, l2cap_util.o(i.l2capSarBufReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2capSarBufReset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
</UL>

<P><STRONG><a name="[297]"></a>l2capSendCmd</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, l2cap_util.o(i.l2capSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateRsp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
</UL>

<P><STRONG><a name="[299]"></a>l2capSendReq</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, l2cap_util.o(i.l2capSendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendCmd
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capAllocChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
</UL>

<P><STRONG><a name="[376]"></a>l2capStopTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, l2cap_util.o(i.l2capStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2capStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
</UL>

<P><STRONG><a name="[319]"></a>linkDB_Add</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, linkdb.o(i.linkDB_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = linkDB_Add &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[284]"></a>linkDB_Authen</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, linkdb.o(i.linkDB_Authen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
</UL>

<P><STRONG><a name="[1f9]"></a>linkDB_Find</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_Find))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PasscodeUpdate
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapUpdateConnSignCounter
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendLinkUpdateEvent
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Authen
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcessIncoming
</UL>

<P><STRONG><a name="[2d3]"></a>linkDB_FindFirst</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, linkdb.o(i.linkDB_FindFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = linkDB_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectNext
</UL>

<P><STRONG><a name="[245]"></a>linkDB_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linkDB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[249]"></a>linkDB_NumActive</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_NumActive))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_NumActiveConnections
</UL>

<P><STRONG><a name="[20b]"></a>linkDB_PerformFunc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, linkdb.o(i.linkDB_PerformFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = linkDB_PerformFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
</UL>

<P><STRONG><a name="[264]"></a>linkDB_Register</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, linkdb.o(i.linkDB_Register))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_app_AddService
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleProfile_AddService
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitServer
</UL>

<P><STRONG><a name="[31c]"></a>linkDB_Remove</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = linkDB_Remove &rArr; reportStatusChange
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
</UL>

<P><STRONG><a name="[2a6]"></a>linkDB_State</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, linkdb.o(i.linkDB_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linkDB_State
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessOSALMsg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleConnStatusCB
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleProfile_HandleConnStatusCB
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSendMsg
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSendReq
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleConnStatusCB
</UL>

<P><STRONG><a name="[2ee]"></a>lxl_Watchdog_Init_func</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, watchdog.o(i.lxl_Watchdog_Init_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lxl_Watchdog_Init_func &rArr; watchdog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[381]"></a>notify_cfg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, simpleblecentral.o(i.notify_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = notify_cfg &rArr; GATT_WriteCharValue &rArr; gattWrite &rArr; ATT_WriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_WriteCharValue
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_connect_ok
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_connect_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEGATTDiscoveryEvent
</UL>

<P><STRONG><a name="[30]"></a>osalInitTasks</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, osal_simpleble.o(i.osalInitTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = osalInitTasks &rArr; SimpleBLECentral_Init &rArr; GAPBondMgr_SetParameter &rArr; gapBondMgrEraseAllBondings &rArr; gapBondMgrEraseBonding &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_APP_Task_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerInit (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watchdog_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_Init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init (via Veneer)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[203]"></a>osal_snv_compact</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal_snv.o(i.osal_snv_compact))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
</UL>

<P><STRONG><a name="[1ed]"></a>osal_snv_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, osal_snv.o(i.osal_snv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
</UL>

<P><STRONG><a name="[1fe]"></a>osal_snv_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, osal_snv.o(i.osal_snv_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_garbage_size
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_free_size
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrChangeState
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>

<P><STRONG><a name="[2c4]"></a>ota_app_AddService</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ota_app_service.o(i.ota_app_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ota_app_AddService &rArr; GATTServApp_RegisterService &rArr; GATT_RegisterService &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ota_version
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLEPeripheral_Init
</UL>

<P><STRONG><a name="[318]"></a>sendEstLinkEvent</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gap_linkmgr.o(i.sendEstLinkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sendEstLinkEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessCreateLLConnCmdStatus
</UL>

<P><STRONG><a name="[2e1]"></a>simpleProfile_Notify</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sbpprofile_ota.o(i.simpleProfile_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = simpleProfile_Notify &rArr; GATTServApp_ProcessCharCfg &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_send_bytes
</UL>

<P><STRONG><a name="[3c0]"></a>smAuthReqToUint8</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sm_mgr.o(i.smAuthReqToUint8))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildSecurityReq
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>

<P><STRONG><a name="[3a2]"></a>smDetermineKeySize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sm_pairing.o(i.smDetermineKeySize))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessEncryptionInformation
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRandom
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessEncryptionInformation
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[391]"></a>smEndPairing</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sm_pairing.o(i.smEndPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smNextPairingState
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessSigningInfo
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessMasterID
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIdentityAddrInfo
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupInitiatorKeys
</UL>

<P><STRONG><a name="[2b5]"></a>smGenerateConfirm</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, sm_pairing.o(i.smGenerateConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smGenerateConfirm &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingConfirm
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
</UL>

<P><STRONG><a name="[2b9]"></a>smGeneratePairingReqRsp</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sm_pairing.o(i.smGeneratePairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
</UL>

<P><STRONG><a name="[255]"></a>smGenerateRandBuf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sm_mgr.o(i.smGenerateRandBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smGenerateRandBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_rand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SecParamsInit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[3a0]"></a>smGenerateRandMsg</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, sm_pairing.o(i.smGenerateRandMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smGenerateRandMsg &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingRandom
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[61]"></a>smLinkCheck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sm_pairing.o(i.smLinkCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smLinkCheck &rArr; smFreePairingParams &rArr; smStopRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_task.o(i.SM_Init)
</UL>
<P><STRONG><a name="[3a9]"></a>smNextPairingState</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sm_pairing.o(i.smNextPairingState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smNextPairingState &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smState_timerCB
</UL>

<P><STRONG><a name="[3a3]"></a>smPairingSendEncInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm_pairing.o(i.smPairingSendEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smPairingSendEncInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[3a8]"></a>smPairingSendIdentityAddrInfo</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sm_pairing.o(i.smPairingSendIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smPairingSendIdentityAddrInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[3a5]"></a>smPairingSendIdentityInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm_pairing.o(i.smPairingSendIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smPairingSendIdentityInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[3a4]"></a>smPairingSendMasterID</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sm_pairing.o(i.smPairingSendMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[3a1]"></a>smPairingSendSingingInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm_pairing.o(i.smPairingSendSingingInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smPairingSendSingingInfo &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderSendNextKeyInfo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>

<P><STRONG><a name="[3aa]"></a>smProcessDataMsg</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, sm_pairing.o(i.smProcessDataMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSigningInfo
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSecurityReq
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingReq
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingRandom
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingFailed
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingConfirm
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseMasterID
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityInfo
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseIdentityAddrInfo
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseEncInfo
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcessIncoming
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg
</UL>

<P><STRONG><a name="[3b7]"></a>smProcessEncryptChange</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, sm_pairing.o(i.smProcessEncryptChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smProcessEncryptChange &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendBondCompleteEvent
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg
</UL>

<P><STRONG><a name="[22c]"></a>smProcessPairingReq</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, sm_pairing.o(i.smProcessPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smProcessPairingReq &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
</UL>

<P><STRONG><a name="[3b8]"></a>smProcessRandComplete</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sm_mgr.o(i.smProcessRandComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smProcessRandComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RandCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessOSALMsg
</UL>

<P><STRONG><a name="[2b3]"></a>smRegisterInitiator</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm_pairing.o(i.smRegisterInitiator))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_InitiatorInit
</UL>

<P><STRONG><a name="[2b7]"></a>smRegisterResponder</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm_pairing.o(i.smRegisterResponder))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResponderInit
</UL>

<P><STRONG><a name="[3bb]"></a>smSavePairInfo</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, sm_pairing.o(i.smSavePairInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smSavePairInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
</UL>

<P><STRONG><a name="[259]"></a>smSendFailAndEnd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sm_pairing.o(i.smSendFailAndEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateAuth
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessPairingReq
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[258]"></a>smSendSMMsg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, smp.o(i.smSendSMMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_bm_alloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStartRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendFailAndEnd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendSingingInfo
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityInfo
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendEncInfo
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
</UL>

<P><STRONG><a name="[231]"></a>smStartEncryption</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sm_pairing.o(i.smStartEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smStartEncryption
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
</UL>

<P><STRONG><a name="[3b6]"></a>smStartRspTimer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sm_mgr.o(i.smStartRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smStartRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSendSMMsg
</UL>

<P><STRONG><a name="[83]"></a>smState_timerCB</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sm_task.o(i.smState_timerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smState_timerCB &rArr; smNextPairingState &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smNextPairingState
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_rsppairing.o(i.smResponderSendNextKeyInfo)
<LI> sm_intpairing.o(i.smInitiatorSendNextKeyInfo)
</UL>
<P><STRONG><a name="[39d]"></a>smStopRspTimer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sm_mgr.o(i.smStopRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smStopRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smFreePairingParams
</UL>

<P><STRONG><a name="[3bc]"></a>smTimedOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sm_pairing.o(i.smTimedOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smTimedOut &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTo_timerCB
</UL>

<P><STRONG><a name="[8a]"></a>smTo_timerCB</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sm_task.o(i.smTo_timerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smTo_timerCB &rArr; smTimedOut &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smTimedOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_mgr.o(i.smStartRspTimer)
</UL>
<P><STRONG><a name="[257]"></a>smUint8ToAuthReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sm_mgr.o(i.smUint8ToAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessPairingReq
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParseSecurityReq
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpParsePairingReq
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
</UL>

<P><STRONG><a name="[2ab]"></a>sm_ah</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, sm_mgr.o(i.sm_ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sm_ah &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ResolveRandomAddrs
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CalcRandomAddr
</UL>

<P><STRONG><a name="[2b4]"></a>sm_c1</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, sm_pairing.o(i.sm_c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddressMode
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddress
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRsp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReq
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSetPairingReqRsp
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_PasskeyUpdate
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingRandom
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingConfirm
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRandom
</UL>

<P><STRONG><a name="[3bd]"></a>sm_c1new</STRONG> (Thumb, 194 bytes, Stack size 120 bytes, sm_mgr.o(i.sm_c1new))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_xor
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>

<P><STRONG><a name="[3ba]"></a>sm_s1</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, sm_mgr.o(i.sm_s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sm_s1 &rArr; smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_revmemcpy (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRandom
</UL>

<P><STRONG><a name="[84]"></a>smpBuildEncInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildEncInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendEncInfo)
</UL>
<P><STRONG><a name="[85]"></a>smpBuildIdentityAddrInfo</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, smp.o(i.smpBuildIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildIdentityAddrInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendIdentityAddrInfo)
</UL>
<P><STRONG><a name="[86]"></a>smpBuildIdentityInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildIdentityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendIdentityInfo)
</UL>
<P><STRONG><a name="[87]"></a>smpBuildMasterID</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, smp.o(i.smpBuildMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildMasterID
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendMasterID)
</UL>
<P><STRONG><a name="[7f]"></a>smpBuildPairingConfirm</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildPairingConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGenerateConfirm)
</UL>
<P><STRONG><a name="[89]"></a>smpBuildPairingFailed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, smp.o(i.smpBuildPairingFailed))
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smSendFailAndEnd)
</UL>
<P><STRONG><a name="[82]"></a>smpBuildPairingRandom</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildPairingRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGenerateRandMsg)
</UL>
<P><STRONG><a name="[80]"></a>smpBuildPairingReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpBuildPairingReq &rArr; smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGeneratePairingReqRsp)
</UL>
<P><STRONG><a name="[3bf]"></a>smpBuildPairingReqRsp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, smp.o(i.smpBuildPairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingRsp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReq
</UL>

<P><STRONG><a name="[81]"></a>smpBuildPairingRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smp.o(i.smpBuildPairingRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpBuildPairingRsp &rArr; smpBuildPairingReqRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpBuildPairingReqRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smGeneratePairingReqRsp)
</UL>
<P><STRONG><a name="[55]"></a>smpBuildSecurityReq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpBuildSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildSecurityReq
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_perilinkmgr.o(i.GAP_SendSlaveSecurityRequest)
</UL>
<P><STRONG><a name="[88]"></a>smpBuildSigningInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpBuildSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpBuildSigningInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_pairing.o(i.smPairingSendSingingInfo)
</UL>
<P><STRONG><a name="[3af]"></a>smpParseEncInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParseEncInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseEncInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3b2]"></a>smpParseIdentityAddrInfo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp.o(i.smpParseIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseIdentityAddrInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3b1]"></a>smpParseIdentityInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParseIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseIdentityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3b0]"></a>smpParseMasterID</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, smp.o(i.smpParseMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseMasterID
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3ac]"></a>smpParsePairingConfirm</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParsePairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParsePairingConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3ae]"></a>smpParsePairingFailed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, smp.o(i.smpParsePairingFailed))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3ad]"></a>smpParsePairingRandom</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParsePairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParsePairingRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3ab]"></a>smpParsePairingReq</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, smp.o(i.smpParsePairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpParsePairingReq &rArr; smUint8ToAuthReq
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3b4]"></a>smpParseSecurityReq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, smp.o(i.smpParseSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpParseSecurityReq &rArr; smUint8ToAuthReq
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3b3]"></a>smpParseSigningInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(i.smpParseSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpParseSigningInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[3cb]"></a>smpResponderProcessPairingReq</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, sm_rsppairing.o(i.smpResponderProcessPairingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smpResponderProcessPairingReq &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[14]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[3d1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[bd]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ce]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3d3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3d4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[3d5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3d6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[34]"></a>hard_fault</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, jump_table.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3d7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c4]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3d8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3d9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3da]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3db]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>hal_UART0_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_UART0_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[d1]"></a>L2CAP_Fragment_SendDataPkt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SendDataPkt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPktToSegmentBuff (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer
</UL>

<P><STRONG><a name="[d3]"></a>l2capSegmentBuffToLinkLayer</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l2capSegmentBuffToLinkLayer &rArr; L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capEncapSendData (via Veneer)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capPocessFragmentTxData
</UL>

<P><STRONG><a name="[3d]"></a>l2capPocessFragmentTxData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, l2cap_util.o(_section_sram_code_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2capPocessFragmentTxData &rArr; l2capSegmentBuffToLinkLayer &rArr; L2CAP_Fragment_SendDataPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capSegmentBuffToLinkLayer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[d5]"></a>HCI_LE_ConnUpdateCmd</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, patch.o(i.HCI_LE_ConnUpdateCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCI_LE_ConnUpdateCmd &rArr; LL_ConnUpdate1
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandStatusEvent (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnUpdate1
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>HCI_LE_LtkReqNegReplyCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, patch.o(i.HCI_LE_LtkReqNegReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCI_LE_LtkReqNegReplyCmd &rArr; LL_EncLtkNegReply
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkNegReply
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
</UL>

<P><STRONG><a name="[db]"></a>HCI_LE_LtkReqReplyCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, patch.o(i.HCI_LE_LtkReqReplyCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCI_LE_LtkReqReplyCmd &rArr; LL_EncLtkReply
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkReply
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smResponderProcessLTKReq (via Veneer)
</UL>

<P><STRONG><a name="[d6]"></a>LL_ConnUpdate1</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, patch.o(i.LL_ConnUpdate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ConnUpdate1
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnActive (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ConnUpdateCmd
</UL>

<P><STRONG><a name="[22]"></a>LL_CreateConn1</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, patch.o(i.LL_CreateConn1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_CreateConn1
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CreateConn0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[3a]"></a>LL_ENC_AES128_Encrypt1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, patch.o(i.LL_ENC_AES128_Encrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ENC_AES128_Encrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[24]"></a>LL_ENC_Decrypt1</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, patch.o(i.LL_ENC_Decrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ENC_Decrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_LoadKey (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateNonce (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> patch.o(_section_xip_code_)
<LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[3b]"></a>LL_ENC_Encrypt1</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, patch.o(i.LL_ENC_Encrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ENC_Encrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_LoadKey (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateNonce (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[d9]"></a>LL_EncLtkNegReply</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, patch.o(i.LL_EncLtkNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EncLtkNegReply
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnActive (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqNegReplyCmd
</UL>

<P><STRONG><a name="[dc]"></a>LL_EncLtkReply</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, patch.o(i.LL_EncLtkReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EncLtkReply
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnActive (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqReplyCmd
</UL>

<P><STRONG><a name="[37]"></a>LL_IRQHandler1</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, patch.o(i.LL_IRQHandler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_IRQHandler1 &rArr; ll_processBasicIRQ_secondaryAdvTRX
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processPrdScanIRQ (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processPrdAdvIRQ (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtInitIRQ (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_irq_status (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_clr_irq (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScan (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecInit (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSecAdvAllow (via Veneer)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryAdvTRX
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_SRX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[2b]"></a>LL_SetAdvControl1</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, patch.o(i.LL_SetAdvControl1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_SetAdvControl1
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timer (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_slave)
</UL>
<P><STRONG><a name="[28]"></a>LL_SetAdvParam1</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, patch.o(i.LL_SetAdvParam1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_SetAdvParam1
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_slave)
</UL>
<P><STRONG><a name="[3e]"></a>LL_SetDataLengh1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, patch.o(i.LL_SetDataLengh1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SetDataLengh1
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetDataLengh0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[21]"></a>LL_SetScanControl1</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, patch.o(i.LL_SetScanControl1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_SetScanControl1
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timer (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_evt_schedule (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[20]"></a>LL_SetScanParam1</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, patch.o(i.LL_SetScanParam1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SetScanParam1
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanParam0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[23]"></a>LL_StartEncrypt1</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, patch.o(i.LL_StartEncrypt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_StartEncrypt1
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateTrueRandNum (via Veneer)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenDeviceSKD (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenDeviceIV (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnActive (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[13]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3de]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[121]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failling
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_default_name (via Veneer)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd (via Veneer)
</UL>

<P><STRONG><a name="[3df]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3e0]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c5]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2fa]"></a>__psr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, patch.o(i.__psr))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write (via Veneer)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write (via Veneer)
</UL>

<P><STRONG><a name="[3e1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3e2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3e3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[109]"></a>_efuse_chip_version_check</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, phy_sec_ext.o(i._efuse_chip_version_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finidv
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
</UL>

<P><STRONG><a name="[12]"></a>_hard_fault</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, jump_table.o(i._hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _hard_fault &rArr; WaitMs
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_soft_reset (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(.emb_text)
</UL>
<P><STRONG><a name="[113]"></a>_rom_sec_boot_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phy_sec_ext.o(i._rom_sec_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_boot_init
</UL>

<P><STRONG><a name="[11c]"></a>ec_app_ble_param_init</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, ec_app_ble.o(i.ec_app_ble_param_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ec_app_ble_param_init &rArr; ec_core_ble_set_suuid &rArr; uuid_str_to_num
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_set_suuid (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_set_ruuid (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_ota_en (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_name (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_get_mac (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_register_event
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>ec_app_ble_peripheral_register_event</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_app_ble_peripheral_register_event
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_receive_cb (via Veneer)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_event_cb (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init
</UL>

<P><STRONG><a name="[129]"></a>ec_app_flash_crc</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ec_app_flash.o(i.ec_app_flash_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ec_app_flash_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_safe_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_read
</UL>

<P><STRONG><a name="[12f]"></a>ec_app_flash_sys_param_read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ec_app_flash.o(i.ec_app_flash_sys_param_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ec_app_flash_sys_param_read &rArr; ec_app_flash_sys_param_write &rArr; ec_app_flash_safe_write &rArr; ec_app_flash_sector_select_set &rArr; ec_core_flash_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_read (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_crc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sector_select_get
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_delay_ms
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>ec_app_flash_sys_param_write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ec_app_flash.o(i.ec_app_flash_sys_param_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ec_app_flash_sys_param_write &rArr; ec_app_flash_safe_write &rArr; ec_app_flash_sector_select_set &rArr; ec_core_flash_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_safe_write
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_read
</UL>

<P><STRONG><a name="[132]"></a>ec_core_adc_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ec_core_adc.o(i.ec_core_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ec_core_adc_init &rArr; hal_adc_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>ec_core_delay_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ec_core_delay.o(i.ec_core_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_core_delay_ms &rArr; WaitMs
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_read
</UL>

<P><STRONG><a name="[13f]"></a>ec_core_hw_timer_get_count</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ec_core_timer.o(i.ec_core_hw_timer_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rising
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failling
</UL>

<P><STRONG><a name="[134]"></a>ec_core_hw_timer_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ec_core_timer.o(i.ec_core_hw_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ec_core_hw_timer_init &rArr; hal_timer_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>ec_core_hw_timer_int_process</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ec_core_timer.o(i.ec_core_hw_timer_int_process))
<BR>[Address Reference Count : 1]<UL><LI> ec_core_timer.o(i.ec_core_hw_timer_init)
</UL>
<P><STRONG><a name="[136]"></a>ec_core_hw_timer_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ec_core_timer.o(i.ec_core_hw_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_core_hw_timer_start &rArr; hal_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failling
</UL>

<P><STRONG><a name="[138]"></a>ec_core_hw_timer_stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ec_core_timer.o(i.ec_core_hw_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_core_hw_timer_stop &rArr; hal_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rising
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failling
</UL>

<P><STRONG><a name="[13a]"></a>ec_core_sw_timer_start</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ec_core_timer.o(i.ec_core_sw_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_core_sw_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sw_watchdog_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>ec_core_sw_watchdog_feed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ec_core_wdg.o(i.ec_core_sw_watchdog_feed))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_peripheral_receive_event
</UL>

<P><STRONG><a name="[13e]"></a>ec_core_sw_watchdog_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ec_core_wdg.o(i.ec_core_sw_watchdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_core_sw_watchdog_init &rArr; ec_core_sw_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sw_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>failling</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, main.o(i.failling))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = failling &rArr; ec_core_ble_send &rArr; ec_ble_peripheral_send_package &rArr; ec_ble_peripheral_send_bytes &rArr; simpleProfile_Notify &rArr; GATTServApp_ProcessCharCfg &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_stop
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_get_count
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_send (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRange2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inRange
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[10b]"></a>finidv</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, phy_sec_ext.o(i.finidv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt0 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_efuse_chip_version_check
</UL>

<P><STRONG><a name="[b8]"></a>hal_ADC_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, adc.o(i.hal_ADC_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = hal_ADC_IRQHandler &rArr; hal_adc_stop &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_stop
</UL>

<P><STRONG><a name="[133]"></a>hal_adc_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc.o(i.hal_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_adc_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_adcc_cfg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_adc_init
</UL>

<P><STRONG><a name="[145]"></a>hal_adc_stop</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, adc.o(i.hal_adc_stop), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hal_adc_stop &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_adcc_cfg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_disable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ADC_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>hal_flash_erase_sector</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, flash.o(i.hal_flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_flash_erase_sector &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_erase_sector (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_erase_sector (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect (via Veneer)
</UL>

<P><STRONG><a name="[14f]"></a>hal_flash_read</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, flash.o(i.hal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_read (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_get_mac (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_LowCurrentLdo_enable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_init (via Veneer)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read (via Veneer)
</UL>

<P><STRONG><a name="[150]"></a>hal_flash_write</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, flash.o(i.hal_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_write (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_write (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write (via Veneer)
</UL>

<P><STRONG><a name="[152]"></a>hal_pwrmgr_LowCurrentLdo_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_LowCurrentLdo_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_pwrmgr_LowCurrentLdo_enable &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
</UL>

<P><STRONG><a name="[2ef]"></a>hal_pwrmgr_RAM_retention</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
</UL>

<P><STRONG><a name="[158]"></a>hal_pwrmgr_RAM_retention_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_sleep_process
</UL>

<P><STRONG><a name="[153]"></a>hal_pwrmgr_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
</UL>

<P><STRONG><a name="[156]"></a>hal_pwrmgr_is_lock</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_is_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_is_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sleep_disable (via Veneer)
</UL>

<P><STRONG><a name="[157]"></a>hal_pwrmgr_lock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sleep_disable (via Veneer)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf (via Veneer)
</UL>

<P><STRONG><a name="[146]"></a>hal_pwrmgr_register</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, pwrmgr.o(i.hal_pwrmgr_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxl_Watchdog_Init_func (via Veneer)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sleep_init (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_init (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watchdog_Init (via Veneer)
</UL>

<P><STRONG><a name="[31]"></a>hal_pwrmgr_sleep_process</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_sleep_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_sleep_process
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[14b]"></a>hal_pwrmgr_unlock</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dma_stop_channel (via Veneer)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_stop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_int_handle (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler (via Veneer)
</UL>

<P><STRONG><a name="[32]"></a>hal_pwrmgr_wakeup_process</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_wakeup_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_wakeup_process
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[15a]"></a>hal_rom_boot_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, patch.o(i.hal_rom_boot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_rom_boot_init &rArr; _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sec_boot_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init (via Veneer)
</UL>

<P><STRONG><a name="[15b]"></a>hal_spif_cache_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash.o(i.hal_spif_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_spif_cache_init &rArr; hw_spif_cache_config &rArr; hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
</UL>

<P><STRONG><a name="[140]"></a>inRange</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.inRange))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failling
</UL>

<P><STRONG><a name="[141]"></a>inRange2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.inRange2))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failling
</UL>

<P><STRONG><a name="[29]"></a>llCalcMaxScanTime1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, patch.o(i.llCalcMaxScanTime1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llCalcMaxScanTime1 &rArr; read_LL_remainder_time1
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_slave)
</UL>
<P><STRONG><a name="[1f]"></a>llMasterEvt_TaskEndOk1</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, patch.o(i.llMasterEvt_TaskEndOk1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llMasterEvt_TaskEndOk1
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxBufferSize (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_scheduler (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextMasterEvent (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llPhyModeCtrlUpdateNotify (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[25]"></a>llProcessMasterControlProcedures1</STRONG> (Thumb, 1198 bytes, Stack size 72 bytes, patch.o(i.llProcessMasterControlProcedures1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llProcessMasterControlProcedures1 &rArr; llSetupStartEncRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llDequeueCtrlPkt (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteVersionInfoCback (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteUsedFeaturesCompleteCback (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncKeyRefreshCback (via Veneer)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncChangeCback (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupVersionIndReq (via Veneer)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUpdateParamReq (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUpdateChanReq (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUnknownRsp (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupTermInd (via Veneer)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupRejectExtInd (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPhyUpdateInd (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPhyReq (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPauseEncRsp (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPauseEncReq (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetRsp (via Veneer)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetReq (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupEncReq (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDataLenghtRsp (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDataLenghtReq (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupCTERsp (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupCTEReq (via Veneer)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llReplaceCtrlPkt (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llPhyModeCtrlUpdateNotify (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llPduLengthUpdate (via Veneer)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[26]"></a>llProcessSlaveControlProcedures1</STRONG> (Thumb, 840 bytes, Stack size 48 bytes, patch.o(i.llProcessSlaveControlProcedures1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = llProcessSlaveControlProcedures1 &rArr; llSetupStartEncRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt (via Veneer)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llDequeueCtrlPkt (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteVersionInfoCback (via Veneer)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkReqCback (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncKeyRefreshCback (via Veneer)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncChangeCback (via Veneer)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_cte_txSupp (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupVersionIndReq (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUnknownRsp (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupTermInd (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncReq (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupRejectInd (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPhyRsp (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPhyReq (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPauseEncRsp (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetRsp (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupEncRsp (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDataLenghtRsp (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDataLenghtReq (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupCTERsp (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupCTEReq (via Veneer)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llReplaceCtrlPkt (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llPduLengthUpdate (via Veneer)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[3f]"></a>llProcessTxData1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, patch.o(i.llProcessTxData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llProcessTxData1
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData0 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[2a]"></a>llSecAdvAllow1</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, patch.o(i.llSecAdvAllow1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llSecAdvAllow1 &rArr; read_LL_remainder_time1
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_slave)
</UL>
<P><STRONG><a name="[2c]"></a>llSetupSecAdvEvt1</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, patch.o(i.llSetupSecAdvEvt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = llSetupSecAdvEvt1 &rArr; rf_phy_change_cfg0
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecScannableAdvEvt (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecNonConnectableAdvEvt (via Veneer)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecConnectableAdvEvt (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv (via Veneer)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_change_cfg0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_slave)
</UL>
<P><STRONG><a name="[16e]"></a>llSetupStartEncRsp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, patch.o(i.llSetupStartEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llSetupStartEncRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures1
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlProcedures1
</UL>

<P><STRONG><a name="[40]"></a>ll_generateTxBuffer1</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, patch.o(i.ll_generateTxBuffer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_generateTxBuffer1
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_read_ptr (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTxBufferSize (via Veneer)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tx_read_ptr (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_write_tfifo (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tfifo_wrptr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[36]"></a>ll_hw_go1</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, patch.o(i.ll_hw_go1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_hw_go1
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[2f2]"></a>ll_patch_master</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, patch.o(i.ll_patch_master))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
</UL>

<P><STRONG><a name="[2eb]"></a>ll_patch_slave</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, patch.o(i.ll_patch_slave))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
</UL>

<P><STRONG><a name="[ef]"></a>ll_processBasicIRQ_SRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_SRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_SRX
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[27]"></a>ll_processBasicIRQ_SRX0</STRONG> (Thumb, 2296 bytes, Stack size 56 bytes, patch.o(i.ll_processBasicIRQ_SRX0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ll_processBasicIRQ_SRX0
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_evt_schedule (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvReportCback (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_master_function (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isIrkAllZero (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isAddrInWhiteList (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_write_tfifo (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_tx_rx_interval (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx_settle (via Veneer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_stx (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_rfifo_depth (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_clr_irq (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_getRPAListEntry (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_ResolveRandomAddrs (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_CalcRandomAddr (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupScan (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llReleaseConnId (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.ll_patch_master)
</UL>
<P><STRONG><a name="[f1]"></a>ll_processBasicIRQ_secondaryAdvTRX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patch.o(i.ll_processBasicIRQ_secondaryAdvTRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_processBasicIRQ_secondaryAdvTRX
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[11]"></a>main</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; ec_app_flash_sys_param_read &rArr; ec_app_flash_sys_param_write &rArr; ec_app_flash_safe_write &rArr; ec_app_flash_sector_select_set &rArr; ec_core_flash_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ver (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sys_clk_set (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sw_watchdog_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sw_timer_start
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sleep_disable (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_main_loop_run (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_out_init (via Veneer)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_int_register (via Veneer)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_in_init (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_adc_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_ble_param_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ae]"></a>rc32k_calibration</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rc32k_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rc32k_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[38]"></a>rf_calibrate1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_calibrate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rf_calibrate1 &rArr; rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[1af]"></a>rf_phy_ana_cfg</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, rf_phy_driver.o(i.rf_phy_ana_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_phy_ana_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[1b2]"></a>rf_phy_bb_cfg</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_phy_bb_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_phy_bb_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_crc_fmt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[39]"></a>rf_phy_change_cfg0</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_phy_change_cfg0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_phy_change_cfg0
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSecAdvEvt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL>
<P><STRONG><a name="[33]"></a>rf_phy_ini</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_phy_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_phy_ini &rArr; rf_phy_bb_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_tx2rx_timing_config (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[1b4]"></a>rf_phy_set_txPower</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_phy_set_txPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_phy_set_txPower
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[1b1]"></a>rf_rxDcoc_cfg</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_rxDcoc_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_rxDcoc_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[1b0]"></a>rf_tpCal_gen_cap_arrary</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, rf_phy_driver.o(i.rf_tpCal_gen_cap_arrary))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[1b6]"></a>rf_tp_cal</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_tp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
</UL>

<P><STRONG><a name="[2e]"></a>rising</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.rising))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rising &rArr; ec_core_hw_timer_stop &rArr; hal_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_stop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_hw_timer_get_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3c]"></a>wakeup_init1</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, patch.o(i.wakeup_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wakeup_init1 &rArr; check_96MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_init (via Veneer)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_counter (via Veneer)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_timing (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout_1st (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_loop_timeout (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_empty_head (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_96MXtal_by_rcTracking
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(_section_xip_code_)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2f]"></a>A_task</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.A_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = A_task &rArr; ec_core_gpio_out_init &rArr; hal_gpioretention_register &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_out_init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[16]"></a>ec_app_ble_peripheral_connect_event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_connect_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ec_app_ble_peripheral_connect_event &rArr; ec_core_uart0_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart0_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
</UL>
<P><STRONG><a name="[17]"></a>ec_app_ble_peripheral_disconnect_event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_disconnect_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ec_app_ble_peripheral_disconnect_event &rArr; ec_core_uart0_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart0_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
</UL>
<P><STRONG><a name="[19]"></a>ec_app_ble_peripheral_notify_disable_event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_notify_disable_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ec_app_ble_peripheral_notify_disable_event &rArr; ec_core_uart0_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart0_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
</UL>
<P><STRONG><a name="[18]"></a>ec_app_ble_peripheral_notify_enable_event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_notify_enable_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ec_app_ble_peripheral_notify_enable_event &rArr; ec_core_uart0_printf &rArr; log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart0_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
</UL>
<P><STRONG><a name="[1a]"></a>ec_app_ble_peripheral_receive_event</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_receive_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ec_app_ble_peripheral_receive_event &rArr; ec_core_gpio_out_init &rArr; hal_gpioretention_register &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sw_watchdog_feed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_gpio_out_init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_app_ble_peripheral.o(i.ec_app_ble_peripheral_register_event)
</UL>
<P><STRONG><a name="[128]"></a>ec_app_flash_safe_write</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ec_app_flash.o(i.ec_app_flash_safe_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ec_app_flash_safe_write &rArr; ec_app_flash_sector_select_set &rArr; ec_core_flash_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_write (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_erase_sector (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_crc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sector_select_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sector_select_get
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_write
</UL>

<P><STRONG><a name="[12a]"></a>ec_app_flash_sector_select_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ec_app_flash.o(i.ec_app_flash_sector_select_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ec_app_flash_sector_select_get &rArr; ec_core_flash_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_safe_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_sys_param_read
</UL>

<P><STRONG><a name="[12d]"></a>ec_app_flash_sector_select_set</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ec_app_flash.o(i.ec_app_flash_sector_select_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ec_app_flash_sector_select_set &rArr; ec_core_flash_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_write (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_flash_erase_sector (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_app_flash_safe_write
</UL>

<P><STRONG><a name="[1c]"></a>ec_core_sw_watchdog_10s_task</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ec_core_wdg.o(i.ec_core_sw_watchdog_10s_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ec_core_sw_watchdog_10s_task &rArr; ec_core_sys_soft_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_get_link_state (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_sys_soft_reset (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_core_wdg.o(i.ec_core_sw_watchdog_init)
</UL>
<P><STRONG><a name="[1d]"></a>adc_wakeup_hdl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc.o(i.adc_wakeup_hdl))
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.hal_adc_init)
</UL>
<P><STRONG><a name="[11a]"></a>clear_adcc_cfg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adc.o(i.clear_adcc_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_adcc_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_adc_init
</UL>

<P><STRONG><a name="[304]"></a>gapCentralRole_ProcessGAPMsg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, central.o(i.gapCentralRole_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = gapCentralRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_CancelRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessOSALMsg
</UL>

<P><STRONG><a name="[215]"></a>gapCentralRole_ProcessOSALMsg</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, central.o(i.gapCentralRole_ProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = gapCentralRole_ProcessOSALMsg &rArr; gapCentralRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadRssiCmd (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapCentralRole_ProcessGAPMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_ProcessEvent
</UL>

<P><STRONG><a name="[20f]"></a>gapCentralRole_RssiFind</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, central.o(i.gapCentralRole_RssiFind))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_CancelRssi
</UL>

<P><STRONG><a name="[71]"></a>gapCentralRole_timerCB</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, central.o(i.gapCentralRole_timerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapCentralRole_timerCB
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> central.o(i.gapCentralRole_ProcessOSALMsg)
</UL>
<P><STRONG><a name="[363]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ec_core.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[2ec]"></a>hal_rfphy_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ec_core.o(i.hal_rfphy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_rfphy_init &rArr; hal_rom_boot_init &rArr; _rom_sec_boot_init &rArr; _efuse_chip_version_check &rArr; finidv
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_set_heap (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_boot_init (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnectContext (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_init
</UL>

<P><STRONG><a name="[3d0]"></a>ascii_to_hex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ec_core_ble.o(i.ascii_to_hex))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_str_to_num
</UL>

<P><STRONG><a name="[2e4]"></a>uuid_str_to_num</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, ec_core_ble.o(i.uuid_str_to_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uuid_str_to_num
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_set_suuid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_set_ruuid
</UL>

<P><STRONG><a name="[2e3]"></a>_ec_core_ble_peripheral_set_name</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ec_core_ble_peripheral.o(i._ec_core_ble_peripheral_set_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ec_core_ble_peripheral_set_name
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_name
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_ble_peripheral_set_default_name
</UL>

<P><STRONG><a name="[114]"></a>_spif_wait_nobusy_x</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, flash.o(i._spif_wait_nobusy_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_rddata (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_cmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
</UL>

<P><STRONG><a name="[14c]"></a>hal_cache_tag_flush</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, flash.o(i.hal_cache_tag_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_spif_cache_config
</UL>

<P><STRONG><a name="[1e]"></a>hw_spif_cache_config</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, flash.o(i.hw_spif_cache_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hw_spif_cache_config &rArr; hal_cache_tag_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable (via Veneer)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_config (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spif_cache_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i.hal_spif_cache_init)
</UL>
<P><STRONG><a name="[350]"></a>check_addr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs.o(i.check_addr))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>

<P><STRONG><a name="[2f5]"></a>fs_init</STRONG> (Thumb, 322 bytes, Stack size 128 bytes, fs.o(i.fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_write
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
</UL>

<P><STRONG><a name="[2f9]"></a>fs_search_items</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, fs.o(i.fs_search_items))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spif_read
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_find_id
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_get_garbage_size
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
</UL>

<P><STRONG><a name="[2f6]"></a>fs_spif_read</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fs.o(i.fs_spif_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_read
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_search_items
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
</UL>

<P><STRONG><a name="[2f7]"></a>fs_spif_write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fs.o(i.fs_spif_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fs_spif_write &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write (via Veneer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_write
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_item_del
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fs_garbage_collect
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
</UL>

<P><STRONG><a name="[1fa]"></a>gapBondMgrAddBond</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, gapbondmgr.o(i.gapBondMgrAddBond))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gapBondMgrAddBond &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondSetupPrivFlag
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondRecvEvt
</UL>

<P><STRONG><a name="[1f3]"></a>gapBondMgrAuthenticate</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, gapbondmgr.o(i.gapBondMgrAuthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gapBondMgrAuthenticate &rArr; GAP_Authenticate &rArr; SM_StartPairing &rArr; smGeneratePairingReqRsp &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[1ec]"></a>gapBondMgrBondReq</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, gapbondmgr.o(i.gapBondMgrBondReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gapBondMgrBondReq &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[2fd]"></a>gapBondMgrBondTotal</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrBondTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapBondMgrBondTotal
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondSetupPrivFlag
</UL>

<P><STRONG><a name="[20a]"></a>gapBondMgrChangeState</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gapbondmgr.o(i.gapBondMgrChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = gapBondMgrChangeState &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
</UL>

<P><STRONG><a name="[201]"></a>gapBondMgrEraseAllBondings</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gapbondmgr.o(i.gapBondMgrEraseAllBondings))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = gapBondMgrEraseAllBondings &rArr; gapBondMgrEraseBonding &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseBonding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
</UL>

<P><STRONG><a name="[202]"></a>gapBondMgrEraseBonding</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, gapbondmgr.o(i.gapBondMgrEraseBonding))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = gapBondMgrEraseBonding &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrEraseAllBondings
</UL>

<P><STRONG><a name="[207]"></a>gapBondMgrFindAddr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrFindAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapBondMgrFindAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>

<P><STRONG><a name="[2fe]"></a>gapBondMgrFindCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapbondmgr.o(i.gapBondMgrFindCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
</UL>

<P><STRONG><a name="[209]"></a>gapBondMgrGetPublicAddr</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, gapbondmgr.o(i.gapBondMgrGetPublicAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gapBondMgrGetPublicAddr &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[1eb]"></a>gapBondMgrGetStateFlags</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gapbondmgr.o(i.gapBondMgrGetStateFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gapBondMgrGetStateFlags &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[1f0]"></a>gapBondMgrInvertCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapbondmgr.o(i.gapBondMgrInvertCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrUpdateCharCfg
</UL>

<P><STRONG><a name="[1e8]"></a>gapBondMgrReadBonds</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrReadBonds))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gapBondMgrReadBonds &rArr; osal_snv_read &rArr; hal_fs_item_read &rArr; hal_fs_item_find_id &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondSetupPrivFlag
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncWhiteList
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_SetParameter
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_Init
</UL>

<P><STRONG><a name="[54]"></a>gapBondMgrSendServiceChange</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gapbondmgr.o(i.gapBondMgrSendServiceChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = gapBondMgrSendServiceChange &rArr; GATTServApp_SendServiceChangedInd &rArr; GATT_ServiceChangedInd &rArr; GATT_Indication &rArr; ATT_HandleValueInd &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ServiceChangeInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapbondmgr.o(i.GAPBondMgr_ServiceChangeInd)
</UL>
<P><STRONG><a name="[1f4]"></a>gapBondMgrSlaveSecurityReq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gapbondmgr.o(i.gapBondMgrSlaveSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gapBondMgrSlaveSecurityReq &rArr; GAP_SendSlaveSecurityRequest &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[20d]"></a>gapBondMgrUpdateCharCfg</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, gapbondmgr.o(i.gapBondMgrUpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gapBondMgrUpdateCharCfg &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_write
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrInvertCharCfgItem
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindCharCfgItem
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
</UL>

<P><STRONG><a name="[2ff]"></a>gapBondMgr_SyncCharCfg</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, gapbondmgr.o(i.gapBondMgr_SyncCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = gapBondMgr_SyncCharCfg &rArr; GAPBondMgr_UpdateCharCfg &rArr; gapBondMgrUpdateCharCfg &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_UpdateCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondRecvEvt
</UL>

<P><STRONG><a name="[2fb]"></a>gapBondMgr_SyncWhiteList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgr_SyncWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapBondMgr_SyncWhiteList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ClearWhiteListCmd (via Veneer)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_AddWhiteListCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>

<P><STRONG><a name="[1fb]"></a>gapBondRecvEvt</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondRecvEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = gapBondRecvEvt &rArr; gapBondMgr_SyncCharCfg &rArr; GAPBondMgr_UpdateCharCfg &rArr; gapBondMgrUpdateCharCfg &rArr; osal_snv_write &rArr; hal_fs_garbage_collect &rArr; fs_init &rArr; fs_search_items &rArr; fs_spif_read &rArr; hal_flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgr_SyncCharCfg
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ProcessGAPMsg
</UL>

<P><STRONG><a name="[2fc]"></a>gapBondSetupPrivFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gapbondmgr.o(i.gapBondSetupPrivFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapBondSetupPrivFlag &rArr; GGS_SetParameter &rArr; ggs_SetAttrWPermit
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrReadBonds
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAddBond
</UL>

<P><STRONG><a name="[8b]"></a>ggs_ReadAttrCB</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, gapgattserver.o(i.ggs_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ggs_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapgattserver.o(.constdata)
</UL>
<P><STRONG><a name="[295]"></a>ggs_SetAttrWPermit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gapgattserver.o(i.ggs_SetAttrWPermit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ggs_SetAttrWPermit
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
</UL>

<P><STRONG><a name="[8c]"></a>ggs_WriteAttrCB</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, gapgattserver.o(i.ggs_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ggs_WriteAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapgattserver.o(.constdata)
</UL>
<P><STRONG><a name="[270]"></a>gattServApp_FindAuthorizeAttrCB</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.gattServApp_FindAuthorizeAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>

<P><STRONG><a name="[265]"></a>gattServApp_FindCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>

<P><STRONG><a name="[33e]"></a>gattServApp_FindPrepareWriteQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindPrepareWriteQ))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
</UL>

<P><STRONG><a name="[271]"></a>gattServApp_FindServiceCBs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindServiceCBs))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>

<P><STRONG><a name="[56]"></a>gattServApp_HandleConnStatusCB</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_HandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattServApp_HandleConnStatusCB &rArr; GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATTServApp_Init)
</UL>
<P><STRONG><a name="[33f]"></a>gattServApp_ProcessExecuteWriteReq</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessExecuteWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = gattServApp_ProcessExecuteWriteReq &rArr; ATT_ExecuteWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[340]"></a>gattServApp_ProcessFindByTypeValueReq</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gattServApp_ProcessFindByTypeValueReq &rArr; ATT_FindByTypeValueRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[26f]"></a>gattServApp_ProcessMsg</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = gattServApp_ProcessMsg &rArr; gattServApp_ProcessReadByTypeReq &rArr; ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent
</UL>

<P><STRONG><a name="[345]"></a>gattServApp_ProcessPrepareWriteReq</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_ProcessPrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = gattServApp_ProcessPrepareWriteReq &rArr; ATT_PrepareWriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[343]"></a>gattServApp_ProcessReadByGrpTypeReq</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, gattservapp.o(i.gattServApp_ProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gattServApp_ProcessReadByGrpTypeReq &rArr; ATT_ReadByGrpTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[341]"></a>gattServApp_ProcessReadByTypeReq</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, gattservapp.o(i.gattServApp_ProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gattServApp_ProcessReadByTypeReq &rArr; ATT_ReadByTypeRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[342]"></a>gattServApp_ProcessReadMultiReq</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gattServApp_ProcessReadMultiReq &rArr; ATT_ReadMultiRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[344]"></a>gattServApp_ProcessWriteReq</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = gattServApp_ProcessWriteReq &rArr; ATT_WriteRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[262]"></a>gattServApp_SetNumPrepareWrites</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_SetNumPrepareWrites))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattServApp_SetNumPrepareWrites
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[8d]"></a>gattServApp_WriteAttrCB</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattServApp_WriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[358]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[357]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[362]"></a>hal_gpio_interrupt_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
</UL>

<P><STRONG><a name="[35b]"></a>hal_gpio_retention_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_retention_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_retention_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sleep_handler
</UL>

<P><STRONG><a name="[77]"></a>hal_gpio_sleep_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_gpio_sleep_handler &rArr; hal_gpio_wakeup_set &rArr; hal_gpio_wakeup_control
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_retention_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[360]"></a>hal_gpio_wakeup_control</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_wakeup_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_gpio_wakeup_control
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
</UL>

<P><STRONG><a name="[76]"></a>hal_gpio_wakeup_handler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hal_gpio_wakeup_handler &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init &rArr; hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin2pin3_control
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event_pin
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_retention_enable
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[34c]"></a>hal_gpioin_event</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gpio.o(i.hal_gpioin_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_gpioin_event &rArr; hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event_pin
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_GPIO_IRQHandler
</UL>

<P><STRONG><a name="[35f]"></a>hal_gpioin_event_pin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(i.hal_gpioin_event_pin))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_event
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_handler
</UL>

<P><STRONG><a name="[70]"></a>_uart0_putc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, my_printf.o(i._uart0_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _uart0_putc &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_printf.o(i.ec_core_uart0_printf)
</UL>
<P><STRONG><a name="[2f3]"></a>log_vsprintf</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, my_printf.o(i.log_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = log_vsprintf &rArr; number
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_core_uart0_printf
</UL>

<P><STRONG><a name="[380]"></a>number</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, my_printf.o(i.number))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = number
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>

<P><STRONG><a name="[37f]"></a>skip_atoi</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, my_printf.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_vsprintf
</UL>

<P><STRONG><a name="[7e]"></a>handleConnStatusCB</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ota_app_service.o(i.handleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = handleConnStatusCB &rArr; GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_soft_reset
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_app_service.o(i.ota_app_AddService)
</UL>
<P><STRONG><a name="[37e]"></a>load_ota_version</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ota_app_service.o(i.load_ota_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = load_ota_version
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_app_AddService
</UL>

<P><STRONG><a name="[9d]"></a>ota_ReadAttrCB</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ota_app_service.o(i.ota_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ota_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_app_service.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>ota_WriteAttrCB</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ota_app_service.o(i.ota_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = ota_WriteAttrCB &rArr; process_cmd &rArr; response_rsp &rArr; sendNotify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_app_service.o(.constdata)
</UL>
<P><STRONG><a name="[387]"></a>ota_disconnect_link</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ota_app_service.o(i.ota_disconnect_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ota_disconnect_link &rArr; WaitMs
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd
</UL>

<P><STRONG><a name="[386]"></a>process_cmd</STRONG> (Thumb, 542 bytes, Stack size 80 bytes, ota_app_service.o(i.process_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = process_cmd &rArr; response_rsp &rArr; sendNotify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_soft_reset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ota_mode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_rsp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_disconnect_link
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_WriteAttrCB
</UL>

<P><STRONG><a name="[38c]"></a>response</STRONG> (Thumb, 46 bytes, Stack size 264 bytes, ota_app_service.o(i.response))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = response &rArr; sendNotify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd
</UL>

<P><STRONG><a name="[38e]"></a>response_rsp</STRONG> (Thumb, 54 bytes, Stack size 264 bytes, ota_app_service.o(i.response_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = response_rsp &rArr; sendNotify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd
</UL>

<P><STRONG><a name="[38f]"></a>sendNotify</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ota_app_service.o(i.sendNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = sendNotify &rArr; GATT_Notification &rArr; ATT_HandleValueNoti &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_rsp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response
</UL>

<P><STRONG><a name="[38b]"></a>set_ota_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ota_app_service.o(i.set_ota_mode))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cmd
</UL>

<P><STRONG><a name="[328]"></a>gapRole_ProcessGAPMsg</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapRole_ProcessGAPMsg &rArr; GAP_UpdateAdvertisingData
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_timeoutEx (via Veneer)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
</UL>

<P><STRONG><a name="[21f]"></a>gapRole_ProcessOSALMsg</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, peripheral.o(i.gapRole_ProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gapRole_ProcessOSALMsg &rArr; GAPRole_TerminateConnection &rArr; GAP_TerminateLinkReq &rArr; disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[222]"></a>gapRole_startConnUpdate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_startConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gapRole_startConnUpdate &rArr; L2CAP_ConnParamUpdateReq &rArr; l2capSendReq &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SetParameter
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[159]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pwrmgr.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_wakeup_process
</UL>

<P><STRONG><a name="[62]"></a>simpleProfile_HandleConnStatusCB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sbpprofile_ota.o(i.simpleProfile_HandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = simpleProfile_HandleConnStatusCB &rArr; GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbpprofile_ota.o(i.SimpleProfile_AddService)
</UL>
<P><STRONG><a name="[9f]"></a>simpleProfile_ReadAttrCB</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sbpprofile_ota.o(i.simpleProfile_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = simpleProfile_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbpprofile_ota.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>simpleProfile_WriteAttrCB</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sbpprofile_ota.o(i.simpleProfile_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = simpleProfile_WriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_receive_data
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_notification_enable_cb
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_notification_disable_cb
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbpprofile_ota.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>simpleBLEAddDeviceInfo</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, simpleblecentral.o(i.simpleBLEAddDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = simpleBLEAddDeviceInfo &rArr; simpleBLEAnalysisADVDATA
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEAnalysisADVDATA
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralEventCB
</UL>

<P><STRONG><a name="[393]"></a>simpleBLEAnalysisADVDATA</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, simpleblecentral.o(i.simpleBLEAnalysisADVDATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = simpleBLEAnalysisADVDATA
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEAddDeviceInfo
</UL>

<P><STRONG><a name="[a2]"></a>simpleBLECentralEventCB</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, simpleblecentral.o(i.simpleBLECentralEventCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = simpleBLECentralEventCB &rArr; GATT_ExchangeMTU &rArr; ATT_ExchangeMTUReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_EstablishLink
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llInitFeatureSetDLE (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadRemoteVersionInfoCmd (via Veneer)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_PPLUS_ConnEventDoneNoticeCmd (via Veneer)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadRemoteUsedFeaturesCmd (via Veneer)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ExchangeMTU
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_SetMTUSizeMax
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_disconnect_cb
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_connect_fail
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEAddDeviceInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleblecentral.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>simpleBLECentralPairStateCB</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, simpleblecentral.o(i.simpleBLECentralPairStateCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = simpleBLECentralPairStateCB
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleblecentral.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>simpleBLECentralPasscodeCB</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, simpleblecentral.o(i.simpleBLECentralPasscodeCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simpleBLECentralPasscodeCB
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleblecentral.o(.constdata)
</UL>
<P><STRONG><a name="[2bf]"></a>simpleBLECentralProcessGATTMsg</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, simpleblecentral.o(i.simpleBLECentralProcessGATTMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = simpleBLECentralProcessGATTMsg &rArr; simpleBLEGATTDiscoveryEvent &rArr; GATT_DiscAllChars &rArr; gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_rev_data
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLEGATTDiscoveryEvent
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetCurrentMTUSize
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleBLECentral_ProcessEvent
</UL>

<P><STRONG><a name="[a1]"></a>simpleBLECentralRssiCB</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simpleblecentral.o(i.simpleBLECentralRssiCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simpleBLECentralRssiCB
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simpleblecentral.o(.constdata)
</UL>
<P><STRONG><a name="[2d7]"></a>simpleBLECentral_LinkDevice</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, simpleblecentral.o(i.simpleBLECentral_LinkDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = simpleBLECentral_LinkDevice &rArr; GAPCentralRole_EstablishLink &rArr; GAP_EstablishLinkReq &rArr; GAP_NumActiveConnections
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_bond_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPCentralRole_EstablishLink
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_central_scan_cb
</UL>

<P><STRONG><a name="[396]"></a>simpleBLEGATTDiscoveryEvent</STRONG> (Thumb, 542 bytes, Stack size 56 bytes, simpleblecentral.o(i.simpleBLEGATTDiscoveryEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = simpleBLEGATTDiscoveryEvent &rArr; GATT_DiscAllChars &rArr; gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllChars
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleBLECentralProcessGATTMsg
</UL>

<P><STRONG><a name="[1]"></a>peripheralStateNotificationCB</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, simplebleperipheral.o(i.peripheralStateNotificationCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = peripheralStateNotificationCB &rArr; ec_ble_peripheral_connect_cb &rArr; GAPRole_GetParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_GetParameter
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_disconnect_cb
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ble_peripheral_connect_cb
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_PPLUS_ConnEventDoneNoticeCmd (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplebleperipheral.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>peripheralStateReadRssiCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simplebleperipheral.o(i.peripheralStateReadRssiCB))
<BR>[Address Reference Count : 1]<UL><LI> simplebleperipheral.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>simpleProfileChangeCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simplebleperipheral.o(i.simpleProfileChangeCB))
<BR>[Address Reference Count : 1]<UL><LI> simplebleperipheral.o(.data)
</UL>
<P><STRONG><a name="[34e]"></a>spi_int_handle</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, spi.o(i.spi_int_handle), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_int_handle &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_SPI1_IRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_SPI0_IRQHandler
</UL>

<P><STRONG><a name="[34d]"></a>spis_int_handle</STRONG> (Thumb, 252 bytes, Stack size 88 bytes, spi.o(i.spis_int_handle), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spis_int_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_SPI1_IRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_SPI0_IRQHandler
</UL>

<P><STRONG><a name="[36a]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
</UL>

<P><STRONG><a name="[366]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_set
</UL>

<P><STRONG><a name="[367]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, timer.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_set
</UL>

<P><STRONG><a name="[368]"></a>hal_timer_set_loadtimer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(i.hal_timer_set_loadtimer))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_set
</UL>

<P><STRONG><a name="[369]"></a>hal_timer_stop_counter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.hal_timer_stop_counter))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer_stop
</UL>

<P><STRONG><a name="[79]"></a>hal_timer_wakeup_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.hal_timer_wakeup_handler))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.hal_timer_init)
</UL>
<P><STRONG><a name="[cf]"></a>irq_rx_handler</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, uart.o(i.irq_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = irq_rx_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART1_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>irq_tx_empty_handler</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, uart.o(i.irq_tx_empty_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = irq_tx_empty_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART1_IRQHandler
</UL>

<P><STRONG><a name="[36c]"></a>txmit_buf_polling</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, uart.o(i.txmit_buf_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[36b]"></a>txmit_buf_use_tx_buf</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, uart.o(i.txmit_buf_use_tx_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_disable_irq (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_enable_irq (via Veneer)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[64]"></a>hal_watchdog_sleep_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, watchdog.o(i.hal_watchdog_sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_watchdog_sleep_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> watchdog.o(i.lxl_Watchdog_Init_func)
<LI> watchdog.o(i.Watchdog_Init)
</UL>
<P><STRONG><a name="[63]"></a>hal_watchdog_wakeup_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, watchdog.o(i.hal_watchdog_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_watchdog_wakeup_handler &rArr; watchdog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> watchdog.o(i.lxl_Watchdog_Init_func)
<LI> watchdog.o(i.Watchdog_Init)
</UL>
<P><STRONG><a name="[2cb]"></a>watchdog_init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, watchdog.o(i.watchdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = watchdog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_reload_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lxl_Watchdog_Init_func
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Watchdog_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_watchdog_wakeup_handler
</UL>

<P><STRONG><a name="[237]"></a>gapAllocScanRecs</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gap_centdevmgr.o(i.gapAllocScanRecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapAllocScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
</UL>

<P><STRONG><a name="[3]"></a>gapCentProcessHCICmdEvt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.gapCentProcessHCICmdEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapCentProcessHCICmdEvt &rArr; gapSetScanParamStatus &rArr; gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_centdevmgr.o(.data)
</UL>
<P><STRONG><a name="[308]"></a>gapFindScanRec</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapFindScanRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapFindScanRec
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo
</UL>

<P><STRONG><a name="[235]"></a>gapFreeScanRecs</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, gap_centdevmgr.o(i.gapFreeScanRecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
</UL>

<P><STRONG><a name="[30f]"></a>gapProcessAdvertDevInfo</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapProcessAdvertDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gapProcessAdvertDevInfo &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapDetermineAddrType
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindScanRec
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[6]"></a>gapProcessConnEvt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.gapProcessConnEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gapProcessConnEvt &rArr; gapProcessL2CAPSignalEvt &rArr; L2CAP_ConnParamUpdateRsp &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapTerminateConnComplete
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessL2CAPSignalEvt
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessCreateLLConnCmdStatus
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCmdStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_centdevmgr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>gapProcessScanningEvt</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapProcessScanningEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gapProcessScanningEvt &rArr; gapProcessAdvertDevInfo &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendScanEnable
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDeviceInfoEvent
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendDevDiscEvent
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertDevInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_centdevmgr.o(.data)
</UL>
<P><STRONG><a name="[323]"></a>gapSendDevDiscEvent</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapSendDevDiscEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapSendDevDiscEvent &rArr; gapFreeScanRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeScanRecs
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[325]"></a>gapSendDeviceInfoEvent</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gap_centdevmgr.o(i.gapSendDeviceInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapSendDeviceInfoEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[324]"></a>gapSendScanEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gap_centdevmgr.o(i.gapSendScanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapSendScanEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetScanEnableCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetScanParamStatus
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessScanningEvt
</UL>

<P><STRONG><a name="[326]"></a>gapSendDeviceInitDoneEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gap_configmgr.o(i.gapSendDeviceInitDoneEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBufSizeCmdStatus
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus
</UL>

<P><STRONG><a name="[25a]"></a>disconnectNext</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gap_linkmgr.o(i.disconnectNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = disconnectNext &rArr; linkDB_FindFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DisconnectCmd (via Veneer)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_FindFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[22d]"></a>gapFreeAuthLink</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gap_linkmgr.o(i.gapFreeAuthLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendAuthEvent
</UL>

<P><STRONG><a name="[30a]"></a>sendAuthEvent</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, gap_linkmgr.o(i.sendAuthEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAuthLink
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPairingCompleteCB
</UL>

<P><STRONG><a name="[31a]"></a>sendTerminateEvent</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gap_linkmgr.o(i.sendTerminateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendTerminateEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
</UL>

<P><STRONG><a name="[24d]"></a>gapAllocAdvRecs</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapAllocAdvRecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapAllocAdvRecs
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit
</UL>

<P><STRONG><a name="[248]"></a>gapFreeAdvertState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapFreeAdvertState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendMakeDiscEvent
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessAdvertisingEvt
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
</UL>

<P><STRONG><a name="[7]"></a>gapPeriProcessHCICmdCompleteEvt</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.gapPeriProcessHCICmdCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gapPeriProcessHCICmdCompleteEvt &rArr; gapWriteAdvEnableStatus &rArr; isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvDataStatus
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>gapProcessAdvertisingEvt</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapProcessAdvertisingEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapProcessAdvertisingEvt &rArr; GAP_EndDiscoverable
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_peridevmgr.o(.data)
</UL>
<P><STRONG><a name="[32a]"></a>gapSendMakeDiscEvent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gap_peridevmgr.o(i.gapSendMakeDiscEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapSendMakeDiscEvent &rArr; gapFreeAdvertState
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFreeAdvertState
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParamsStatus
</UL>

<P><STRONG><a name="[32e]"></a>isLimitedDiscoverableMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gap_peridevmgr.o(i.isLimitedDiscoverableMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = isLimitedDiscoverableMode &rArr; gapFindADType
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapFindADType
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapWriteAdvEnableStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSetAdvParams
</UL>

<P><STRONG><a name="[31d]"></a>gapProcessHCICmdCompleteEvt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gap_task.o(i.gapProcessHCICmdCompleteEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapProcessHCICmdCompleteEvt &rArr; gapReadBD_ADDRStatus &rArr; gapSendDeviceInitDoneEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBufSizeCmdStatus
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapReadBD_ADDRStatus
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessRandomAddrComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessOSALMsg
</UL>

<P><STRONG><a name="[24e]"></a>gapProcessOSALMsg</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, gap_task.o(i.gapProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gapProcessOSALMsg &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessDisconnectCompleteEvt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnectionCompleteEvt
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessConnUpdateCompleteEvt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapProcessHCICmdCompleteEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ProcessEvent
</UL>

<P><STRONG><a name="[5b]"></a>gattClientHandleConnStatusCB</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gatt_client.o(i.gattClientHandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattClientHandleConnStatusCB &rArr; gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindClientInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.GATT_InitClient)
</UL>
<P><STRONG><a name="[74]"></a>gattClientHandleTimerCB</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatt_client.o(i.gattClientHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = gattClientHandleTimerCB &rArr; ATT_ExecuteWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteReq
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.gattStoreClientInfo)
</UL>
<P><STRONG><a name="[5a]"></a>gattClientProcessMsgCB</STRONG> (Thumb, 232 bytes, Stack size 288 bytes, gatt_client.o(i.gattClientProcessMsgCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = gattClientProcessMsgCB &rArr; gattProcessMultiReqs &rArr; gattProcessWriteLong &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseHandleValueInd
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParseErrorRsp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_UpdateMtuSize
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindClientInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.GATT_InitClient)
</UL>
<P><STRONG><a name="[330]"></a>gattFindClientInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gatt_client.o(i.gattFindClientInfo))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleConnStatusCB
</UL>

<P><STRONG><a name="[27e]"></a>gattGetClientStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_client.o(i.gattGetClientStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattGetClientStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindClientInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_WriteNoRsp
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ExchangeMTU
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllPrimaryServices
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattWrite
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType
</UL>

<P><STRONG><a name="[336]"></a>gattProcessFindInfo</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gatt_client.o(i.gattProcessFindInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = gattProcessFindInfo &rArr; ATT_FindInfoReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoReq
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[334]"></a>gattProcessMultiReqs</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, gatt_client.o(i.gattProcessMultiReqs))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = gattProcessMultiReqs &rArr; gattProcessWriteLong &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobReq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueReq
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetClientInfo
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessWriteLong
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReliableWrites
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByType
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessReadByGrpType
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
</UL>

<P><STRONG><a name="[339]"></a>gattProcessReadByGrpType</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gatt_client.o(i.gattProcessReadByGrpType))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = gattProcessReadByGrpType &rArr; ATT_ReadByGrpTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeReq
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[338]"></a>gattProcessReadByType</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, gatt_client.o(i.gattProcessReadByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gattProcessReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeReq
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[33b]"></a>gattProcessReliableWrites</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gatt_client.o(i.gattProcessReliableWrites))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = gattProcessReliableWrites &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteReq
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteReq
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[33a]"></a>gattProcessWriteLong</STRONG> (Thumb, 158 bytes, Stack size 272 bytes, gatt_client.o(i.gattProcessWriteLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = gattProcessWriteLong &rArr; ATT_PrepareWriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerUpdate (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteReq
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteReq
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
</UL>

<P><STRONG><a name="[27c]"></a>gattReadByType</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, gatt_client.o(i.gattReadByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gattReadByType &rArr; ATT_ReadByTypeReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeReq
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllChars
</UL>

<P><STRONG><a name="[332]"></a>gattResetClientInfo</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gatt_client.o(i.gattResetClientInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattResetClientInfo &rArr; gattStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattProcessMultiReqs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientProcessMsgCB
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleTimerCB
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattClientHandleConnStatusCB
</UL>

<P><STRONG><a name="[27f]"></a>gattStoreClientInfo</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, gatt_client.o(i.gattStoreClientInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattStoreClientInfo &rArr; gattStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ExchangeMTU
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllPrimaryServices
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattWrite
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattReadByType
</UL>

<P><STRONG><a name="[290]"></a>gattWrite</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gatt_client.o(i.gattWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = gattWrite &rArr; ATT_WriteReq &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteReq
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStoreClientInfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetClientStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_WriteCharValue
</UL>

<P><STRONG><a name="[335]"></a>gattFindServerInfo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gatt_server.o(i.gattFindServerInfo))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattGetServerStatus
</UL>

<P><STRONG><a name="[283]"></a>gattGetServerStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattGetServerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattGetServerStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Indication
</UL>

<P><STRONG><a name="[a6]"></a>gattProcessExchangeMTUReq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gatt_server.o(i.gattProcessExchangeMTUReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>gattProcessExecuteWriteReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gatt_server.o(i.gattProcessExecuteWriteReq))
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>gattProcessFindByTypeValueReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattProcessFindByTypeValueReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>gattProcessFindInfoReq</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, gatt_server.o(i.gattProcessFindInfoReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = gattProcessFindInfoReq &rArr; ATT_FindInfoRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindInfoRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>gattProcessReadByGrpTypeReq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gatt_server.o(i.gattProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattProcessReadByGrpTypeReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>gattProcessReadByTypeReq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattProcessReadByTypeReq &rArr; GATT_FindHandleUUID &rArr; ATT_CompareUUID &rArr; ATT_ConvertUUIDto128
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>gattProcessReadMultiReq</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gatt_server.o(i.gattProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattProcessReadMultiReq &rArr; GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>gattProcessReadReq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gatt_server.o(i.gattProcessReadReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattProcessReadReq &rArr; GATT_VerifyReadPermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>gattProcessWriteReq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gatt_server.o(i.gattProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattProcessWriteReq &rArr; GATT_VerifyWritePermissions &rArr; linkDB_Authen
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyWritePermissions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.constdata)
</UL>
<P><STRONG><a name="[33d]"></a>gattResetServerInfo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_server.o(i.gattResetServerInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattResetServerInfo &rArr; gattStopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerProcessMsgCB
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServerHandleConnStatusCB
</UL>

<P><STRONG><a name="[5d]"></a>gattServerHandleConnStatusCB</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gatt_server.o(i.gattServerHandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattServerHandleConnStatusCB &rArr; gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[59]"></a>gattServerHandleTimerCB</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gatt_server.o(i.gattServerHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gattServerHandleTimerCB &rArr; gattNotifyEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_Indication)
</UL>
<P><STRONG><a name="[5c]"></a>gattServerProcessMsgCB</STRONG> (Thumb, 200 bytes, Stack size 288 bytes, gatt_server.o(i.gattServerProcessMsgCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = gattServerProcessMsgCB &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattResetServerInfo
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattFindServerInfo
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattNotifyEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(i.GATT_InitServer)
</UL>
<P><STRONG><a name="[282]"></a>gattServiceLastHandle</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gatt_server.o(i.gattServiceLastHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gattServiceLastHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceNumAttrs
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr
</UL>

<P><STRONG><a name="[28c]"></a>gattProcessRxData</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gatt_task.o(i.gattProcessRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = gattProcessRxData &rArr; ATT_ErrorRsp &rArr; attSendMsg &rArr; SM_GenerateAuthenSig &rArr; sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ParsePacket
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ProcessEvent
</UL>

<P><STRONG><a name="[372]"></a>l2capProcessRsp</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, l2cap_task.o(i.l2capProcessRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l2capProcessRsp &rArr; l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capStopTimer
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseParamUpdateRsp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseCmdReject
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFreeChannel
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capFindLocalId
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
</UL>

<P><STRONG><a name="[2a1]"></a>l2capProcessRxData</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, l2cap_task.o(i.l2capProcessRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = l2capProcessRxData &rArr; l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParsePacket
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifyData
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessSignal
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HostNumCompletedPkts
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ProcessEvent
</UL>

<P><STRONG><a name="[378]"></a>l2capProcessSignal</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, l2cap_task.o(i.l2capProcessSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = l2capProcessSignal &rArr; L2CAP_CmdReject &rArr; l2capSendCmd &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capParseSignalHdr
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capHandleRxError
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ParseParamUpdateReq
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRsp
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_CmdReject
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capProcessRxData
</UL>

<P><STRONG><a name="[37d]"></a>reportStatusChange</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, linkdb.o(i.reportStatusChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reportStatusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Remove
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Add
</UL>

<P><STRONG><a name="[390]"></a>setupInitiatorKeys</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sm_intpairing.o(i.setupInitiatorKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = setupInitiatorKeys &rArr; smInitiatorSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smInitiatorSendNextKeyInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessSigningInfo
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessMasterID
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIdentityAddrInfo
</UL>

<P><STRONG><a name="[b]"></a>smInitiatorSendNextKeyInfo</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, sm_intpairing.o(i.smInitiatorSendNextKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smInitiatorSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddressMode
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddress
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_rand (via Veneer)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendSingingInfo
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityInfo
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendEncInfo
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupInitiatorKeys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_intpairing.o(.data)
</UL>
<P><STRONG><a name="[3c1]"></a>smpInitiatorProcessEncryptionInformation</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sm_intpairing.o(i.smpInitiatorProcessEncryptionInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpInitiatorProcessEncryptionInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[3c2]"></a>smpInitiatorProcessIdentityAddrInfo</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sm_intpairing.o(i.smpInitiatorProcessIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = smpInitiatorProcessIdentityAddrInfo &rArr; setupInitiatorKeys &rArr; smInitiatorSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupInitiatorKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[3c3]"></a>smpInitiatorProcessIdentityInfo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sm_intpairing.o(i.smpInitiatorProcessIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpInitiatorProcessIdentityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[a]"></a>smpInitiatorProcessIncoming</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, sm_intpairing.o(i.smpInitiatorProcessIncoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = smpInitiatorProcessIncoming &rArr; smpInitiatorProcessPairingRandom &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendSlaveSecurityReqEvent
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessSigningInfo
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRsp
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessPairingRandom
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessMasterID
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIdentityInfo
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIdentityAddrInfo
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessEncryptionInformation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_intpairing.o(.data)
</UL>
<P><STRONG><a name="[3c6]"></a>smpInitiatorProcessMasterID</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sm_intpairing.o(i.smpInitiatorProcessMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = smpInitiatorProcessMasterID &rArr; setupInitiatorKeys &rArr; smInitiatorSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupInitiatorKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[3c5]"></a>smpInitiatorProcessPairingRandom</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, sm_intpairing.o(i.smpInitiatorProcessPairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = smpInitiatorProcessPairingRandom &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartEncryption
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[3c4]"></a>smpInitiatorProcessPairingRsp</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, sm_intpairing.o(i.smpInitiatorProcessPairingRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = smpInitiatorProcessPairingRsp &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapPasskeyNeededCB
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smSavePairInfo
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[3c7]"></a>smpInitiatorProcessSigningInfo</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sm_intpairing.o(i.smpInitiatorProcessSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = smpInitiatorProcessSigningInfo &rArr; setupInitiatorKeys &rArr; smInitiatorSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupInitiatorKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpInitiatorProcessIncoming
</UL>

<P><STRONG><a name="[f]"></a>smResponderProcessLTKReq</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sm_rsppairing.o(i.smResponderProcessLTKReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = smResponderProcessLTKReq &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqReplyCmd (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LtkReqNegReplyCmd (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_rsppairing.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>smResponderSendNextKeyInfo</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, sm_rsppairing.o(i.smResponderSendNextKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smResponderSendNextKeyInfo &rArr; smPairingSendMasterID &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandBuf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetSRK
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetIRK
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddressMode
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapGetDevAddress
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_rand (via Veneer)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendSingingInfo
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendMasterID
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityInfo
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendIdentityAddrInfo
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smPairingSendEncInfo
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_rsppairing.o(.data)
</UL>
<P><STRONG><a name="[3c8]"></a>smpResponderProcessEncryptionInformation</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sm_rsppairing.o(i.smpResponderProcessEncryptionInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpResponderProcessEncryptionInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smDetermineKeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[3c9]"></a>smpResponderProcessIdentityAddrInfo</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sm_rsppairing.o(i.smpResponderProcessIdentityAddrInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpResponderProcessIdentityAddrInfo &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[3ca]"></a>smpResponderProcessIdentityInfo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sm_rsppairing.o(i.smpResponderProcessIdentityInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpResponderProcessIdentityInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[d]"></a>smpResponderProcessIncoming</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sm_rsppairing.o(i.smpResponderProcessIncoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = smpResponderProcessIncoming &rArr; smpResponderProcessPairingRandom &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapSendPairingReqEvent
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingReq
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessSigningInfo
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingRandom
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessPairingConfirm
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessMasterID
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIdentityInfo
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIdentityAddrInfo
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessEncryptionInformation
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smAuthReqToUint8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_rsppairing.o(.data)
</UL>
<P><STRONG><a name="[3ce]"></a>smpResponderProcessMasterID</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sm_rsppairing.o(i.smpResponderProcessMasterID))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpResponderProcessMasterID &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[3cc]"></a>smpResponderProcessPairingConfirm</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sm_rsppairing.o(i.smpResponderProcessPairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = smpResponderProcessPairingConfirm &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[3cd]"></a>smpResponderProcessPairingRandom</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, sm_rsppairing.o(i.smpResponderProcessPairingRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = smpResponderProcessPairingRandom &rArr; sm_c1 &rArr; sm_c1new &rArr; sm_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGenerateRandMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[3cf]"></a>smpResponderProcessSigningInfo</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sm_rsppairing.o(i.smpResponderProcessSigningInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpResponderProcessSigningInfo &rArr; smEndPairing &rArr; gapPairingCompleteCB &rArr; sendAuthEvent &rArr; gapFreeAuthLink
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResponderProcessIncoming
</UL>

<P><STRONG><a name="[2b6]"></a>smProcessOSALMsg</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sm_task.o(i.smProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = smProcessOSALMsg &rArr; smProcessDataMsg &rArr; smSendFailAndEnd &rArr; smSendSMMsg &rArr; L2CAP_SendData &rArr; l2capEncapSendData &rArr; l2capPktToSegmentBuff &rArr; L2CAP_Fragment_bm_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessRandComplete
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessEncryptChange
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_ProcessEvent
</UL>

<P><STRONG><a name="[1c1]"></a>TRNG_Output</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, patch.o(_section_xip_code_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
</UL>

<P><STRONG><a name="[1ba]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, patch.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[118]"></a>check_16MXtal_by_rcTracking</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, patch.o(i.check_16MXtal_by_rcTracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_16MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[119]"></a>check_96MXtal_by_rcTracking</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, patch.o(i.check_96MXtal_by_rcTracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_96MXtal_by_rcTracking
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[15e]"></a>read_LL_remainder_time1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, patch.o(i.read_LL_remainder_time1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_LL_remainder_time1
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSecAdvAllow1
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llCalcMaxScanTime1
</UL>

<P><STRONG><a name="[7d]"></a>l2capHandleTimerCB</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, l2cap_util.o(i.l2capHandleTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = l2capHandleTimerCB &rArr; l2capNotifySignal
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2capNotifySignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap_util.o(i.l2capSendReq)
</UL>
<P><STRONG><a name="[347]"></a>generate_subkey</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sm_mgr.o(i.generate_subkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
</UL>

<P><STRONG><a name="[349]"></a>leftshift_onebit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sm_mgr.o(i.leftshift_onebit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = leftshift_onebit
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[39b]"></a>smEncrypt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sm_mgr.o(i.smEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_s1
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah
</UL>

<P><STRONG><a name="[348]"></a>smEncryptLocal</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sm_mgr.o(i.smEncryptLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smEncryptLocal
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[2af]"></a>sm_CMAC</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, sm_mgr.o(i.sm_CMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sm_CMAC &rArr; generate_subkey &rArr; xor_128
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_128
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEncryptLocal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_VerifyAuthenSig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenerateAuthenSig
</UL>

<P><STRONG><a name="[3be]"></a>sm_xor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sm_mgr.o(i.sm_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1new
</UL>

<P><STRONG><a name="[34a]"></a>xor_128</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, sm_mgr.o(i.xor_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xor_128
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_CMAC
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_subkey
</UL>

<P><STRONG><a name="[2ba]"></a>smFreePairingParams</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sm_pairing.o(i.smFreePairingParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smFreePairingParams &rArr; smStopRspTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smStopRspTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_StartPairing
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smLinkCheck
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smEndPairing
</UL>

<P><STRONG><a name="[39e]"></a>smSetPairingReqRsp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sm_pairing.o(i.smSetPairingReqRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smSetPairingReqRsp &rArr; smUint8ToAuthReq
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smUint8ToAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smGeneratePairingReqRsp
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1
</UL>

<P><STRONG><a name="[3b5]"></a>smpProcessIncoming</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sm_pairing.o(i.smpProcessIncoming))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpProcessIncoming
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smProcessDataMsg
</UL>

<P><STRONG><a name="[10c]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[108]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[112]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[111]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[c0]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
